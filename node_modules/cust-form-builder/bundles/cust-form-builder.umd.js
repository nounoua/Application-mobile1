(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('cust-form-builder', ['exports', '@angular/core'], factory) :
    (factory((global['cust-form-builder'] = {}),global.ng.core));
}(this, (function (exports,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ActionService = /** @class */ (function () {
        function ActionService() {
        }
        /**
         * @param {?} metadata
         * @param {?} originalMethod
         * @return {?}
         */
        ActionService.prototype.externalAction = /**
         * @param {?} metadata
         * @param {?} originalMethod
         * @return {?}
         */
            function (metadata, originalMethod) {
                var _a;
                /** @type {?} */
                var action = "/**\n";
                /** @type {?} */
                var parameters = [];
                /** @type {?} */
                var i = 0;
                for (var key in metadata.parameters) {
                    action += "* @param {" + metadata.parameters[key] + "} " + key + "\n";
                    parameters.push((_a = {}, _a[key] = metadata.args[i], _a));
                    i++;
                }
                action += "* @returns {" + metadata.returnType + "}\n*/\n(" + originalMethod.toString() + ")();";
                return JSON.stringify({
                    actionName: metadata.actionName,
                    action: action,
                    parameters: parameters,
                    args: metadata.args
                });
            };
        /**
         * @param {?} metadata
         * @return {?}
         */
        ActionService.prototype.actionFromPackage = /**
         * @param {?} metadata
         * @return {?}
         */
            function (metadata) {
                return JSON.stringify({
                    package: metadata.package,
                    parameters: metadata.parameters
                });
            };
        ActionService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ActionService.ctorParameters = function () { return []; };
        /** @nocollapse */ ActionService.ngInjectableDef = i0.defineInjectable({ factory: function ActionService_Factory() { return new ActionService(); }, token: ActionService, providedIn: "root" });
        return ActionService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ComputedValueService = /** @class */ (function () {
        function ComputedValueService() {
        }
        /**
         * @param {...?} values
         * @return {?}
         */
        ComputedValueService.prototype.concat = /**
         * @param {...?} values
         * @return {?}
         */
            function () {
                var values = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    values[_i] = arguments[_i];
                }
                /** @type {?} */
                var result = {
                    bind: {
                        values: [],
                        operator: "concat"
                    }
                };
                for (var i in values) {
                    result.bind.values.push(values[i]);
                }
                return JSON.stringify(result);
            };
        /**
         * @param {...?} values
         * @return {?}
         */
        ComputedValueService.prototype.add = /**
         * @param {...?} values
         * @return {?}
         */
            function () {
                var values = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    values[_i] = arguments[_i];
                }
                /** @type {?} */
                var obj = {
                    bind: {
                        values: [],
                        operator: "add"
                    }
                };
                for (var i in values) {
                    obj.bind.values.push(values[i]);
                }
                return JSON.stringify(obj);
            };
        /**
         * @param {...?} values
         * @return {?}
         */
        ComputedValueService.prototype.substract = /**
         * @param {...?} values
         * @return {?}
         */
            function () {
                var values = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    values[_i] = arguments[_i];
                }
                /** @type {?} */
                var obj = {
                    bind: {
                        values: [],
                        operator: "substract"
                    }
                };
                for (var i in values) {
                    obj.bind.values.push(values[i]);
                }
                return JSON.stringify(obj);
            };
        /**
         * @param {...?} values
         * @return {?}
         */
        ComputedValueService.prototype.multiply = /**
         * @param {...?} values
         * @return {?}
         */
            function () {
                var values = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    values[_i] = arguments[_i];
                }
                /** @type {?} */
                var obj = {
                    bind: {
                        values: [],
                        operator: "multiply"
                    }
                };
                for (var i in values) {
                    obj.bind.values.push(values[i]);
                }
                return JSON.stringify(obj);
            };
        ComputedValueService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ComputedValueService.ctorParameters = function () { return []; };
        /** @nocollapse */ ComputedValueService.ngInjectableDef = i0.defineInjectable({ factory: function ComputedValueService_Factory() { return new ComputedValueService(); }, token: ComputedValueService, providedIn: "root" });
        return ComputedValueService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ConditionService = /** @class */ (function () {
        function ConditionService() {
        }
        /**
         * @param {?} cond
         * @return {?}
         */
        ConditionService.prototype.condition = /**
         * @param {?} cond
         * @return {?}
         */
            function (cond) {
                var _a, _b;
                /** @type {?} */
                var origMethod = cond.toString();
                /** @type {?} */
                var lines = origMethod.substring(origMethod.indexOf("{") + 1, origMethod.lastIndexOf("}")).split("\n");
                /** @type {?} */
                var result = [];
                /** @type {?} */
                var conditionVal = null;
                /** @type {?} */
                var val = null;
                for (var i = 0; i < lines.length; i++) {
                    if (lines[i].trim().startsWith("if")) {
                        conditionVal = lines[i].substring(lines[i].indexOf("\"") + 1, lines[i].lastIndexOf("\""));
                        val = lines[i + 1].substring(lines[i + 1].indexOf("\"") + 1, lines[i + 1].lastIndexOf("\""));
                        if (conditionVal == "true") {
                            conditionVal = true;
                        }
                        if (conditionVal == "false") {
                            conditionVal = false;
                        }
                        if (val == "true") {
                            val = true;
                        }
                        if (val == "false") {
                            val = false;
                        }
                        result.push((_a = {},
                            _a[lines[i].substring(lines[i].indexOf(".") + 1, lines[i].lastIndexOf("("))] = (_b = {},
                                _b[lines[i].substring(lines[i].indexOf("(") + 1, lines[i].indexOf("."))] = conditionVal,
                                _b),
                            _a.value = val,
                            _a));
                    }
                }
                return JSON.stringify(result);
            };
        ConditionService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ConditionService.ctorParameters = function () { return []; };
        /** @nocollapse */ ConditionService.ngInjectableDef = i0.defineInjectable({ factory: function ConditionService_Factory() { return new ConditionService(); }, token: ConditionService, providedIn: "root" });
        return ConditionService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ExternalValidationService = /** @class */ (function () {
        function ExternalValidationService() {
        }
        /**
         * @param {?} extValObj
         * @return {?}
         */
        ExternalValidationService.prototype.externalValidation = /**
         * @param {?} extValObj
         * @return {?}
         */
            function (extValObj) {
                //TODO: Not embedded action
                return JSON.stringify({
                    target: extValObj.targetFields,
                    source: extValObj.validationAction,
                    label: extValObj.label
                });
            };
        ExternalValidationService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ExternalValidationService.ctorParameters = function () { return []; };
        /** @nocollapse */ ExternalValidationService.ngInjectableDef = i0.defineInjectable({ factory: function ExternalValidationService_Factory() { return new ExternalValidationService(); }, token: ExternalValidationService, providedIn: "root" });
        return ExternalValidationService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var RegexService = /** @class */ (function () {
        function RegexService() {
        }
        /**
         * @param {?} pattern
         * @param {?=} message
         * @return {?}
         */
        RegexService.prototype.regex = /**
         * @param {?} pattern
         * @param {?=} message
         * @return {?}
         */
            function (pattern, message) {
                return JSON.stringify({
                    pattern: {
                        value: pattern,
                        message: message || ""
                    }
                });
            };
        RegexService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        RegexService.ctorParameters = function () { return []; };
        /** @nocollapse */ RegexService.ngInjectableDef = i0.defineInjectable({ factory: function RegexService_Factory() { return new RegexService(); }, token: RegexService, providedIn: "root" });
        return RegexService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function prerend() {
        require('zone.js/dist/zone-node');
        require('reflect-metadata');
        var renderModuleFactory = require('@angular/platform-server').renderModuleFactory;
        /** @type {?} */
        var htmlparser = require("htmlparser2");
        /** @type {?} */
        var Layout = function () {
            this.pages = [];
        };
        Layout.prototype.addPage = function (page) {
            this.pages.push(page);
        };
        Layout.prototype.getPage = function (id) {
            for (var i in this.pages) {
                if (this.pages[i].id == id) {
                    return this.pages[i];
                }
            }
            return null;
        };
        /** *
         * **************************************
          @type {?} */
        var Canvas = function () {
            this.layout = new Layout();
            this.schema = {};
            this.options = {};
        };
        /** *
         * **************************************
          @type {?} */
        var Page = function (id, sections, title, state) {
            this.id = id;
            this.sections = sections;
            this.title = title;
            this.state = state;
        };
        Page.prototype.addSection = function (section) {
            this.sections.push(section);
        };
        Page.prototype.getSection = function (id) {
            for (var i in this.sections) {
                if (this.sections[i].id == id) {
                    return this.sections[i];
                }
            }
            return null;
        };
        Page.prototype.setTitle = function (title) {
            this.title = title;
        };
        /** *
         * **************************************
          @type {?} */
        var Field = function (id, display, state) {
            this.id = id;
            this.display = display;
            this.state = state;
        };
        /** *
         * **************************************
          @type {?} */
        var FieldSchema = function (type, constraints, label, placeholder, valueList) {
            this.type = type;
            this.constraints = constraints || {};
            this.label = label || undefined;
            this.placeholder = placeholder || undefined;
            this.valueList = valueList || undefined;
        };
        /** *
         * **************************************
          @type {?} */
        var State = function () {
            this.visible = true;
            this["read-only"] = false;
        };
        /** *
         * **************************************
          @type {?} */
        var Section = function (id, fields) {
            this.id = id;
            this.fields = fields;
        };
        Section.prototype.addField = function (field) {
            this.fields.push(field);
        };
        Section.prototype.getField = function (id) {
            for (var i in this.fields) {
                if (this.fields[i].id == id) {
                    return this.fields[i];
                }
            }
            return null;
        };
        /** *
         * **************************************
          @type {?} */
        var returnID = function (attribID, type) {
            if (attribID == undefined || attribID == "") {
                /** @type {?} */
                var id = type + '_';
                /** @type {?} */
                var r = 'abcdefghijklmnopqrstuvwxyz0123456789';
                for (var i = 0; i < 8; i++) {
                    id += r.charAt(Math.floor(Math.random() * r.length));
                }
                return id;
            }
            else {
                return attribID;
            }
        };
        /** *
         * **************************************
          @type {?} */
        var valueSource = function (source, fs, path) {
            if (IsJsonString(source)) {
                /** @type {?} */
                var sourceObj = JSON.parse(source);
                if (sourceObj.hasOwnProperty('actionName')) {
                    /** @type {?} */
                    var convert = require('xml-js');
                    try {
                        /** @type {?} */
                        var xml = fs.readFileSync('../pom.xml');
                    }
                    catch (e) {
                        console.log('valueSource() reading pom.xml:' + e);
                    }
                    /** @type {?} */
                    var options = {
                        ignoreComment: true,
                        compact: true,
                        ignoreDoctype: true,
                        ignoreCdata: true,
                        ignoreAttributes: true,
                        ignoreInstruction: true,
                        ignoreDeclaration: true,
                    };
                    /** @type {?} */
                    var parsed = convert.xml2js(xml, options);
                    /** @type {?} */
                    var grpartID = parsed.project.groupId._text + '/' + parsed.project.artifactId._text;
                    /** @type {?} */
                    var packageInPathFormat = grpartID.replace(/\./g, '/') + '/';
                    try {
                        fs.writeFileSync(path.join('actions/src/main/resources/' + packageInPathFormat, sourceObj.actionName + '.js'), sourceObj.action);
                    }
                    catch (e) {
                        console.log('valueSource() writing action files:' + e);
                    }
                    /** @type {?} */
                    var result = {
                        type: "scriptAction",
                        id: grpartID + "/" + sourceObj.actionName,
                        parameters: sourceObj.parameters
                    };
                    return result;
                }
                //Check if it's a path to action
                else if (sourceObj.hasOwnProperty('package')) {
                    return {
                        type: "scriptAction",
                        id: sourceObj.package,
                        parameters: sourceObj.parameters
                    };
                }
                //Checks if it's condition or computed value OR it's Action From Imported Custom Form
                else if (sourceObj.hasOwnProperty('bind') || sourceObj.hasOwnProperty('type')) {
                    return sourceObj;
                }
            }
            // If source is some kind of const
            if (source == "true") {
                return true;
            }
            else if (source == "false") {
                return false;
            }
            else if (source.startsWith("[{") || source.startsWith("{") || source.startsWith("['")) {
                try {
                    return JSON.parse(source.replace(/\'/g, '\"'));
                }
                catch (e) {
                    console.log("valueSource() ---> else if (source.startsWith...: ", e);
                }
            }
            else if (isNaN(parseInt(source))) {
                return source;
            }
            else {
                return parseInt(source);
            }
        };
        /**
         * @param {?} str
         * @return {?}
         */
        function IsJsonString(str) {
            try {
                JSON.parse(str);
            }
            catch (e) {
                return false;
            }
            return true;
        }
        /** *
         * **************************************
          @type {?} */
        var checkAttributes = function (attribs, field, id, canvas, fs, path) {
            if (attribs.visibility) {
                field.state.visible = valueSource(attribs.visibility, fs, path);
            }
            if (attribs.readonly) {
                field.state["read-only"] = valueSource(attribs.readonly, fs, path);
            }
            if (attribs.value) {
                canvas.schema[id].default = valueSource(attribs.value, fs, path);
            }
            if (attribs.valueList) {
                canvas.schema[id].valueList = valueSource(attribs.valueList, fs, path);
            }
            if (attribs.bind) {
                if (attribs.bind.startsWith('{')) {
                    try {
                        canvas.schema[id].default = {
                            bind: JSON.parse(attribs.bind.replace(/\'/g, '\"'))
                        };
                    }
                    catch (e) {
                        console.log("checkAttributes() ---> attribs.bind", e);
                    }
                }
                else {
                    canvas.schema[id].default = {
                        bind: attribs.bind
                    };
                }
            }
            if (attribs.signpost) {
                canvas.schema[id].signpost = attribs.signpost;
            }
            if (attribs.description) {
                canvas.schema[id].description = attribs.description;
            }
            //  Constraints
            if (attribs.required) {
                canvas.schema[id].constraints.required = valueSource(attribs.required, fs, path);
            }
            if (attribs.regex) {
                try {
                    /** @type {?} */
                    var regexObj = JSON.parse(attribs.regex.replace(/\'/g, '\"'));
                }
                catch (e) {
                    console.log("checkAttributes() ---> attribs.regex", e);
                }
                // Object.assign(canvas.schema[id].constraints, regexObj);
                canvas.schema[id].constraints["pattern"] = regexObj;
            }
            if (attribs.min) {
                canvas.schema[id].constraints["min-value"] = valueSource(attribs.min, fs, path);
            }
            if (attribs.max) {
                canvas.schema[id].constraints["max-value"] = valueSource(attribs.max, fs, path);
            }
            if (attribs.match) {
                canvas.schema[id].constraints.match = attribs.match;
            }
            if (!attribs.multiple || attribs.multiple == "false") {
                canvas.schema[id].type.isMultiple = false;
            }
            //External Validation
            if (attribs.options) {
                try {
                    /** @type {?} */
                    var extVal = JSON.parse(attribs.options.replace(/\'/g, '\"'));
                }
                catch (e) {
                    console.log("checkAttributes() ---> attribs.options", e);
                }
                extVal.source = valueSource(JSON.stringify(extVal.source), fs, path);
                canvas.options["externalValidations"] = [];
                canvas.options["externalValidations"].push(extVal);
            }
        };
        /** *
         * **************************************
          @type {?} */
        var generateJSONForm = function (canvas, fs, path, html) {
            canvas = new Canvas();
            /** @type {?} */
            var formName = "";
            /** @type {?} */
            var currentPage = null;
            /** @type {?} */
            var currentSection = null;
            /** @type {?} */
            var currentSelect = null;
            /** @type {?} */
            var options = [];
            /** @type {?} */
            var trID = null;
            /** @type {?} */
            var dgLabels = [];
            /** @type {?} */
            var dgIDs = [];
            /** @type {?} */
            var dgTypes = [];
            /** @type {?} */
            var dgData = [];
            /** @type {?} */
            var currentDatagrid = null;
            /** @type {?} */
            var parser = new htmlparser.Parser({
                onopentag: function (name, attribs) {
                    /** @type {?} */
                    var field = null;
                    /** @type {?} */
                    var id = "";
                    /** @type {?} */
                    var state = new State();
                    switch (name) {
                        //The Form
                        case "div":
                            if (attribs.class == "custom-form") {
                                formName = attribs.name;
                            }
                            else {
                                formName = "defautFormName";
                            }
                            break;
                        //  Page/Tab
                        case "form":
                            if (currentPage == null) {
                                currentPage = new Page(attribs.id || "General", [], attribs.title || "General", {});
                            }
                            else {
                                currentPage = new Page(returnID(attribs.id, "page"), [], attribs.title || "New Tab", {});
                            }
                            if (attribs.visibility) {
                                currentPage.state.visible = valueSource(attribs.visibility, fs, path);
                            }
                            canvas.layout.addPage(currentPage);
                            break;
                        //  Section
                        case "section":
                            currentSection = new Section(returnID(attribs.id, "section"), []);
                            canvas.layout.getPage(currentPage.id).addSection(currentSection);
                            break;
                        case "input":
                            switch (attribs.type) {
                                //  Text Field
                                case "text":
                                    id = returnID(attribs.id, "textField");
                                    field = new Field(id, "textField", state);
                                    canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                    canvas.schema[id] = new FieldSchema({ dataType: "string" }, {}, attribs.label, attribs.placeholder, undefined);
                                    checkAttributes(attribs, field, id, canvas, fs, path);
                                    break;
                                // Password Field
                                case "password":
                                    id = returnID(attribs.id, "passwordField");
                                    field = new Field(id, "passwordField", state);
                                    canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                    canvas.schema[id] = new FieldSchema({ dataType: "secureString" }, {}, attribs.label, attribs.placeholder, undefined);
                                    checkAttributes(attribs, field, id, canvas, fs, path);
                                    break;
                                // Decimal or Integer Field
                                case "number":
                                    if (attribs.step && attribs.step.startsWith("0.")) {
                                        id = returnID(attribs.id, "decimalField");
                                        field = new Field(id, "decimalField", state);
                                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                        canvas.schema[id] = new FieldSchema({ dataType: "decimal" }, {}, attribs.label, attribs.placeholder, undefined);
                                        checkAttributes(attribs, field, id, canvas, fs, path);
                                        canvas.schema[id].step = parseInt(attribs.step);
                                    }
                                    else {
                                        id = returnID(attribs.id, "integerField");
                                        field = new Field(id, "integerField", state);
                                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                        canvas.schema[id] = new FieldSchema({ dataType: "integer" }, {}, attribs.label, attribs.placeholder, undefined);
                                        checkAttributes(attribs, field, id, canvas, fs, path);
                                        canvas.schema[id].step = parseInt(attribs.step) || 1;
                                    }
                                    break;
                                // CheckBox
                                case "checkbox":
                                    id = returnID(attribs.id, "checkbox");
                                    field = new Field(id, "checkbox", state);
                                    canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                    canvas.schema[id] = new FieldSchema({ dataType: "boolean" }, {}, attribs.label, attribs.placeholder, undefined);
                                    checkAttributes(attribs, field, id, canvas, fs, path);
                                    break;
                            }
                            break;
                        //  Text Area
                        case "textarea":
                            id = returnID(attribs.id, "textArea");
                            field = new Field(id, "textArea", state);
                            canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                            canvas.schema[id] = new FieldSchema({ dataType: "string" }, {}, attribs.label, attribs.placeholder, undefined);
                            checkAttributes(attribs, field, id, canvas, fs, path);
                            break;
                        //  Text / Label
                        case "label":
                            id = returnID(attribs.id, "text");
                            field = new Field(id, "text", state);
                            canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                            canvas.schema[id] = new FieldSchema({ dataType: "string" }, {}, attribs.label, attribs.placeholder, undefined);
                            checkAttributes(attribs, field, id, canvas, fs, path);
                            break;
                        //  Image
                        case "img":
                            id = returnID(attribs.id, "image");
                            field = new Field(id, "image", state);
                            canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                            canvas.schema[id] = new FieldSchema({ dataType: "string" }, {}, attribs.label, attribs.placeholder, undefined);
                            checkAttributes(attribs, field, id, canvas, fs, path);
                            break;
                        //  DATAGRID
                        case "table":
                            /** @type {?} */
                            var field = null;
                            id = returnID(attribs.id, "datagrid");
                            currentDatagrid = id;
                            field = new Field(id, "datagrid", state);
                            canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                            canvas.schema[id] = new FieldSchema({ dataType: "complex", "fields": [], isMultiple: true }, {}, attribs.label, attribs.placeholder, options);
                            checkAttributes(attribs, field, id, canvas, fs, path);
                            break;
                        case "tr":
                            trID = attribs.id;
                            if (attribs.value) {
                                canvas.schema[currentDatagrid].default = valueSource(attribs.value, fs, path);
                            }
                            // TODO: TEST
                            break;
                        case "th":
                            dgIDs.push(attribs.id);
                            dgTypes.push(attribs.type);
                            break;
                        case "td":
                            break;
                        //  Multiselect or Dropdown
                        case "select":
                            if (attribs.multiple == "true") {
                                currentSelect = id = returnID(attribs.id, "multiSelect");
                                field = new Field(id, "multiSelect", state);
                                canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                canvas.schema[id] = new FieldSchema({ dataType: "string", isMultiple: true }, {}, attribs.label, attribs.placeholder, options);
                            }
                            else {
                                currentSelect = id = returnID(attribs.id, "dropDown");
                                field = new Field(id, "dropDown", state);
                                canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                canvas.schema[id] = new FieldSchema({ dataType: "string" }, {}, attribs.label, attribs.placeholder, options);
                            }
                            checkAttributes(attribs, field, id, canvas, fs, path);
                            break;
                        //  Value Picker
                        case "search":
                            id = returnID(attribs.id, "valuePicker");
                            field = new Field(id, "valuePicker", state);
                            canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                            canvas.schema[id] = new FieldSchema({ dataType: "reference", referenceType: attribs.referenceType }, {}, attribs.label, attribs.placeholder, options || []);
                            checkAttributes(attribs, field, id, canvas, fs, path);
                            break;
                        //  Date Time Picker
                        case "date":
                            id = returnID(attribs.id, "dateTime");
                            field = new Field(id, "dateTime", state);
                            canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                            canvas.schema[id] = new FieldSchema({ dataType: "dateTime" }, {}, attribs.label, attribs.placeholder, undefined);
                            checkAttributes(attribs, field, id, canvas, fs, path);
                            break;
                    }
                },
                ontext: function (text) {
                    //      SELECT & MULTISELECT OPTIONS
                    if (currentSelect != null) {
                        options.push(valueSource(text, fs, path));
                    }
                    //      DATAGRID
                    if (trID == "cols") {
                        dgLabels.push(valueSource(text, fs, path));
                    }
                    if (trID == "data") {
                        dgData.push(valueSource(text, fs, path));
                    }
                },
                onclosetag: function (tagname) {
                    if (tagname === "select" && options.length > 0) {
                        canvas.schema[currentSelect].valueList = options;
                        currentSelect = null;
                        options = [];
                    }
                    //      DATAGRID
                    if (tagname === "table") {
                        canvas.schema[currentDatagrid]["type"]["fields"] = [];
                        canvas.schema[currentDatagrid]["default"] = [];
                        for (var i in dgLabels) {
                            canvas.schema[currentDatagrid]["type"]["fields"].push({
                                "label": dgLabels[i],
                                "id": dgIDs[i],
                                "type": {
                                    "dataType": dgTypes[i]
                                }
                            });
                        }
                        /** @type {?} */
                        var cnt = 0;
                        /** @type {?} */
                        var data = {};
                        for (var j in dgData) {
                            data[dgIDs[cnt]] = dgData[j];
                            cnt++;
                            if (cnt > 2) {
                                cnt = 0;
                                canvas.schema[currentDatagrid]["default"].push(data);
                                data = {};
                            }
                        }
                        currentDatagrid = null;
                        dgIDs = [];
                        dgData = [];
                        dgLabels = [];
                        dgTypes = [];
                    }
                }
            }, { decodeEntities: true });
            parser.write(html);
            parser.end();
            return {
                name: formName,
                form: canvas
            };
        };
        /** *
         * **************************************
          @type {?} */
        var fs = require('fs');
        /** @type {?} */
        var path = require('path');
        var AppServerModuleNgFactory = require('../../../dist/custom-form-server/main').AppServerModuleNgFactory;
        renderModuleFactory(AppServerModuleNgFactory, {
            document: '<app-root></app-root>',
            url: '/'
        })
            .then(function (html) {
            /** @type {?} */
            var generated = generateJSONForm(canvas, fs, path, html);
            /** @type {?} */
            var canvas = generated.form;
            /** @type {?} */
            var name = generated.name;
            try {
                fs.writeFileSync(path.join('bin/', name + '.json'), JSON.stringify(canvas));
            }
            catch (e) {
                console.log('renderModuleFactory creating the custom form json file: ' + e);
            }
        })
            .catch(function (err) {
            console.log(err.message);
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} formPath
     * @return {?}
     */
    function importForm(formPath) {
        /** @type {?} */
        var fsys = require('fs');
        /** @type {?} */
        var pathh = require('path');
        try {
            /** @type {?} */
            var form = JSON.parse(fsys.readFileSync(formPath + ".json", 'utf8'));
        }
        catch (e) {
            console.log('ERROR importForm() reading the custom form json file :' + e);
        }
        /** @type {?} */
        var htmlForm = "<div class=\"custom-form\" name=\"" + formPath.substring(formPath.lastIndexOf('/') + 1) + "\">";
        for (var page in form['layout']['pages']) {
            htmlForm += "<form id=\"" + form['layout']['pages'][page]['id'] + "\" title=\"" + form['layout']['pages'][page]['title'] + "\"";
            if (form['layout']['pages'][page]['state']['visible']) {
                htmlForm += " visibility=\"" + form['layout']['pages'][page]['state']['visible'] + "\"";
            }
            htmlForm += ">";
            for (var section in form['layout']['pages'][page]['sections']) {
                htmlForm += "<section id=\"" + form['layout']['pages'][page]['sections'][section]['id'] + "\">";
                for (var field in form['layout']['pages'][page]['sections'][section]['fields']) {
                    /** @type {?} */
                    var fieldID = form['layout']['pages'][page]['sections'][section]['fields'][field]['id'];
                    /** @type {?} */
                    var basicAttributes = "id=\"" + fieldID + "\"\n                    visibility=\"" + JSON.stringify(form['layout']['pages'][page]['sections'][section]['fields'][field]['state']['visible']).replace(/\"/g, '\'') + "\"\n                    readonly=\"" + JSON.stringify(form['layout']['pages'][page]['sections'][section]['fields'][field]['state']['read-only']).replace(/\"/g, '\'') + "\"";
                    /** @type {?} */
                    var closingTag = "";
                    /** @type {?} */
                    var fieldType = form['layout']['pages'][page]['sections'][section]['fields'][field]['display'];
                    switch (fieldType) {
                        case 'text':
                            htmlForm += "<label " + basicAttributes;
                            closingTag = "</label>";
                            break;
                        case 'textArea':
                            htmlForm += "<textarea " + basicAttributes;
                            closingTag = "</textarea>";
                            break;
                        case 'textField':
                            htmlForm += "<input type=\"text\" " + basicAttributes;
                            break;
                        case 'passwordField':
                            htmlForm += "<input type=\"password\" " + basicAttributes;
                            break;
                        case 'decimalField':
                            htmlForm += "<input type=\"number\" step =\"0.\"" + basicAttributes;
                            break;
                        case 'integerField':
                            htmlForm += "<input type=\"number\" " + basicAttributes;
                            break;
                        case 'image':
                            htmlForm += "<img " + basicAttributes;
                            break;
                        case 'checkbox':
                            htmlForm += "<input type=\"checkbox\" " + basicAttributes;
                            break;
                        case 'dropDown':
                            htmlForm += "<select " + basicAttributes;
                            closingTag = "</select>";
                            break;
                        case 'multiSelect':
                            htmlForm += "<select multiple=\"true\" " + basicAttributes;
                            closingTag = "</select>";
                            break;
                        case 'datagrid':
                            htmlForm += "<table " + basicAttributes;
                            closingTag = "</table>";
                            break;
                    }
                    if (form['schema'][fieldID]['constraints']) {
                        if (form['schema'][fieldID]['constraints']['required']) {
                            htmlForm += " required=\"" + JSON.stringify(form['schema'][fieldID]['constraints']['required']).replace(/\"/g, '\'') + "\"";
                        }
                        if (form['schema'][fieldID]['constraints']['min-value']) {
                            htmlForm += " min=\"" + JSON.stringify(form['schema'][fieldID]['constraints']['min-value']).replace(/\"/g, '\'') + "\"";
                        }
                        if (form['schema'][fieldID]['constraints']['max-value']) {
                            htmlForm += " max=\"" + JSON.stringify(form['schema'][fieldID]['constraints']['max-value']).replace(/\"/g, '\'') + "\"";
                        }
                        if (form['schema'][fieldID]['constraints']['pattern']) {
                            htmlForm += " regex=\"" + JSON.stringify({
                                value: form['schema'][fieldID]['constraints']['pattern']['value'],
                                message: form['schema'][fieldID]['constraints']['pattern']['message']
                            }).replace(/\"/g, '\'') + "\"";
                        }
                        if (form['schema'][fieldID]['constraints']['match']) {
                            htmlForm += " match=\"" + JSON.stringify(form['schema'][fieldID]['constraints']['match']).replace(/\"/g, '\'') + "\"";
                        }
                    }
                    if (form['schema'][fieldID]['default']) {
                        if (form['schema'][fieldID]['default']['type'] == 'scriptAction' ||
                            Array.isArray(form['schema'][fieldID]['default'])) {
                            htmlForm += " value=\"" + JSON.stringify(form['schema'][fieldID]['default']).replace(/\"/g, '\'') + "\"";
                            // .replace(/\{/g, '{{ \'{\' }}').replace(/\}/g, '{{ \'}\' }}')}"`;
                        }
                        else if (form['schema'][fieldID]['default']['bind']) {
                            if (JSON.stringify(form['schema'][fieldID]['default']['bind']).startsWith('{')) {
                                htmlForm += " bind=\"" + JSON.stringify(form['schema'][fieldID]['default']['bind']).replace(/\"/g, '\'') + "\"";
                            }
                            else {
                                htmlForm += " bind=\"" + JSON.stringify(form['schema'][fieldID]['default']['bind']).replace(/\"/g, '') + "\"";
                            }
                        }
                        else {
                            htmlForm += " value=\"" + JSON.stringify(form['schema'][fieldID]['default']).replace(/\"/g, '') + "\"";
                        }
                    }
                    if (form['schema'][fieldID]['valueList']) {
                        if (form['schema'][fieldID]['valueList']['type'] == 'scriptAction') {
                            htmlForm += " valueList=\"" + JSON.stringify(form['schema'][fieldID]['valueList']).replace(/\"/g, '\'') + "\"";
                            // .replace(/\{/g, '{{ \'{\' }}').replace(/\}/g, '{{ \'}\' }}')}"`;
                        }
                        else {
                            /** @type {?} */
                            var valueList = "";
                            for (var opt in form['schema'][fieldID]['valueList']) {
                                if (form['schema'][fieldID]['valueList'][opt]['label']) {
                                    valueList += "<option label=\"" + form['schema'][fieldID]['valueList'][opt]['label'] + "\">" + form['schema'][fieldID]['valueList'][opt]['label'] + "</option>";
                                }
                                else {
                                    valueList += "<option>" + JSON.stringify(form['schema'][fieldID]['valueList'][opt]).replace(/\"/g, '') + "</option>";
                                }
                            }
                        }
                    }
                    if (form['schema'][fieldID]['label']) {
                        htmlForm += " label=\"" + form['schema'][fieldID]['label'] + "\"";
                    }
                    if (form['schema'][fieldID]['description']) {
                        htmlForm += " description=\"" + JSON.stringify(form['schema'][fieldID]['description']).replace(/\"/g, '') + "\"";
                    }
                    if (form['schema'][fieldID]['signpost']) {
                        htmlForm += " signpost=\"" + JSON.stringify(form['schema'][fieldID]['signpost']).replace(/\"/g, '\'') + "\"";
                    }
                    if (form['schema'][fieldID]['step']) {
                        htmlForm += " step=\"" + JSON.stringify(form['schema'][fieldID]['step']).replace(/\"/g, '\'') + "\"";
                    }
                    if (form['schema'][fieldID]['placeholder']) {
                        htmlForm += " step=\"" + JSON.stringify(form['schema'][fieldID]['placeholder']).replace(/\"/g, '') + "\"";
                    }
                    //      DATAGRID
                    if (form['schema'][fieldID]['type']['fields']) {
                        /** @type {?} */
                        var dgFields = "<tr id='cols'>";
                        for (var fld in form['schema'][fieldID]['type']['fields']) {
                            dgFields += "<th id='" + form['schema'][fieldID]['type']['fields'][fld]['id'] + "' "
                                + "type='" + form['schema'][fieldID]['type']['fields'][fld]['type']['dataType'] + "' "
                                + "description='" + form['schema'][fieldID]['type']['fields'][fld]['id'] + "'>"
                                + form['schema'][fieldID]['type']['fields'][fld]['label'] + "</th>";
                        }
                        dgFields += "</tr>";
                        if (form['schema'][fieldID]['default']) {
                            /** @type {?} */
                            var dgData = "";
                            if (form['schema'][fieldID]['default']['type'] == "scriptAction") {
                                dgData += "<tr id='data' value=\"" + JSON.stringify(form['schema'][fieldID]['default']).replace(/\"/g, '\'') + "\" ></tr>";
                            }
                            else {
                                /** @type {?} */
                                var colsLen = form['schema'][fieldID]['type']['fields'].length;
                                /** @type {?} */
                                var cnt = 0;
                                for (var entity in form['schema'][fieldID]['default']) {
                                    dgData += "<tr id='data'>";
                                    for (var data in form['schema'][fieldID]['default'][entity]) {
                                        if (cnt < colsLen) {
                                            dgData += "<td>" + form['schema'][fieldID]['default'][entity][data] + "</td>";
                                            cnt++;
                                        }
                                    }
                                    dgData += "</tr>";
                                }
                            }
                        }
                    }
                    if (form['options']['externalValidations']) {
                        for (var extVal in form['options']['externalValidations']) {
                            for (var id in form['options']['externalValidations'][extVal]['target']) {
                                if (fieldID == form['options']['externalValidations'][extVal]['target'][id]) {
                                    htmlForm += " options=\"" + JSON.stringify(form['options']['externalValidations'][extVal]).replace(/\"/g, '\'') + "\"";
                                }
                            }
                        }
                    }
                    htmlForm += ">";
                    if ((fieldType == 'dropDown' || fieldType == 'multiSelect') && valueList) {
                        htmlForm += valueList;
                        valueList = "";
                    }
                    //      DATAGRID
                    if (fieldType == 'datagrid') {
                        htmlForm += dgFields;
                        htmlForm += dgData;
                    }
                    htmlForm += closingTag;
                }
                htmlForm += "</section>";
            }
            htmlForm += "</form>";
        }
        htmlForm += "</div>";
        try {
            // fsys.truncateSync(pathh.join('src/app', 'app.component.html'), '');
            fsys.writeFileSync(pathh.join('src/app', 'app.component.html'), htmlForm);
        }
        catch (e) {
            console.log('ERROR importForm() writing to the app.component.html file:' + e);
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CustFormBuilderModule = /** @class */ (function () {
        function CustFormBuilderModule() {
        }
        CustFormBuilderModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [],
                        exports: []
                    },] }
        ];
        return CustFormBuilderModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.ActionService = ActionService;
    exports.ComputedValueService = ComputedValueService;
    exports.ConditionService = ConditionService;
    exports.ExternalValidationService = ExternalValidationService;
    exports.RegexService = RegexService;
    exports.prerend = prerend;
    exports.importForm = importForm;
    exports.CustFormBuilderModule = CustFormBuilderModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=cust-form-builder.umd.js.map