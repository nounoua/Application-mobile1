{"version":3,"sources":["ng://cust-form-builder/lib/actionService/action.service.ts","ng://cust-form-builder/lib/computedValueService/computed-value.service.ts","ng://cust-form-builder/lib/conditionService/condition.service.ts","ng://cust-form-builder/lib/extValidService/external-validation.service.ts","ng://cust-form-builder/lib/regexService/regex.service.ts","ng://cust-form-builder/lib/cust-form-builder.module.ts","ng://cust-form-builder/lib/prerend.ts","ng://cust-form-builder/lib/importForm.ts"],"names":["ActionService","prototype","externalAction","metadata","originalMethod","action","parameters","i","key","push","_a","args","returnType","toString","JSON","stringify","actionName","actionFromPackage","package","Injectable","providedIn","ComputedValueService","concat","values","_i","arguments","length","result","bind","operator","add","obj","substract","multiply","ConditionService","condition","cond","origMethod","lines","substring","indexOf","lastIndexOf","split","conditionVal","val","trim","startsWith","_b","value","ExternalValidationService","externalValidation","extValObj","target","targetFields","source","validationAction","label","RegexService","regex","pattern","message","CustFormBuilderModule","NgModule","imports","declarations","exports","prerend","require","renderModuleFactory","htmlparser","Layout","this","pages","addPage","page","getPage","id","Canvas","layout","schema","options","Page","sections","title","state","addSection","section","getSection","setTitle","Field","display","FieldSchema","type","constraints","placeholder","valueList","undefined","State","visible","Section","fields","addField","field","getField","returnID","attribID","r","charAt","Math","floor","random","valueSource","fs","path","IsJsonString","str","parse","e","sourceObj","hasOwnProperty","convert","xml","readFileSync","console","log","parsed","xml2js","ignoreComment","compact","ignoreDoctype","ignoreCdata","ignoreAttributes","ignoreInstruction","ignoreDeclaration","grpartID","project","groupId","_text","artifactId","packageInPathFormat","replace","writeFileSync","join","isNaN","parseInt","checkAttributes","attribs","canvas","visibility","readonly","default","signpost","description","required","regexObj","min","max","match","multiple","isMultiple","extVal","AppServerModuleNgFactory","document","url","then","html","generated","formName","currentPage","currentSection","currentSelect","trID","dgLabels","dgIDs","dgTypes","dgData","currentDatagrid","parser","Parser","onopentag","name","class","dataType","step","referenceType","ontext","text","onclosetag","tagname","cnt","data","j","decodeEntities","write","end","form","generateJSONForm","catch","err","importForm","formPath","fsys","pathh","htmlForm","fieldID","basicAttributes","closingTag","fieldType","Array","isArray","opt","dgFields","fld","colsLen","entity"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActionService {\n\n  constructor() { }\n\n  externalAction(metadata: any, originalMethod: any) {\n    var action = \"/**\\n\";\n    var parameters = [];\n    var i = 0;\n    for (var key in metadata.parameters) {\n      action += \"* @param {\" + metadata.parameters[key] + \"} \" + key + \"\\n\";\n      parameters.push({ [key]: metadata.args[i] });\n      i++;\n    }\n    action += \"* @returns {\" + metadata.returnType + \"}\\n*/\\n(\" + originalMethod.toString() + \")();\";\n\n    return JSON.stringify({\n      actionName: metadata.actionName,\n      action: action,\n      parameters: parameters,\n      args: metadata.args\n    });\n  }\n\n\n  actionFromPackage(metadata: any) {\n    return JSON.stringify({\n      package: metadata.package,\n      parameters: metadata.parameters\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComputedValueService {\n\n  constructor() { }\n\n  concat(...values: string[]) {\n    var result = {\n      bind: {\n        values: [],\n        operator: \"concat\"\n      }\n    };\n    for (var i in values) {\n      result.bind.values.push(values[i]);\n    }\n    return JSON.stringify(result);\n  }\n\n  add(...values: string[]) {\n    var obj = {\n      bind: {\n        values: [],\n        operator: \"add\"\n      }\n    };\n    for (var i in values) {\n      obj.bind.values.push(values[i]);\n    }\n    return JSON.stringify(obj);\n  }\n\n  substract(...values: string[]) {\n    var obj = {\n      bind: {\n        values: [],\n        operator: \"substract\"\n      }\n    };\n    for (var i in values) {\n      obj.bind.values.push(values[i]);\n    }\n    return JSON.stringify(obj);\n  }\n\n  multiply(...values: string[]) {\n    var obj = {\n      bind: {\n        values: [],\n        operator: \"multiply\"\n      }\n    };\n    for (var i in values) {\n      obj.bind.values.push(values[i]);\n    }\n    return JSON.stringify(obj);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConditionService {\n\n  constructor() { }\n\n  condition(cond: any) {\n    var origMethod = cond.toString();\n    var lines = origMethod.substring(origMethod.indexOf(\"{\") + 1, origMethod.lastIndexOf(\"}\")).split(\"\\n\");\n    var result = [];\n    var conditionVal = null;\n    var val = null;\n\n    for (var i = 0; i < lines.length; i++) {\n      if (lines[i].trim().startsWith(\"if\")) {\n        conditionVal = lines[i].substring(lines[i].indexOf(\"\\\"\") + 1, lines[i].lastIndexOf(\"\\\"\"));\n        val = lines[i + 1].substring(lines[i + 1].indexOf(\"\\\"\") + 1, lines[i + 1].lastIndexOf(\"\\\"\"));\n\n        if (conditionVal == \"true\") {\n          conditionVal = true;\n        }\n        if (conditionVal == \"false\") {\n          conditionVal = false;\n        }\n        if (val == \"true\") {\n          val = true;\n        }\n        if (val == \"false\") {\n          val = false;\n        }\n\n        result.push({\n          [lines[i].substring(lines[i].indexOf(\".\") + 1, lines[i].lastIndexOf(\"(\"))]: {\n            [lines[i].substring(lines[i].indexOf(\"(\") + 1, lines[i].indexOf(\".\"))]:\n              conditionVal\n          },\n          value: val\n        });\n      }\n    }\n    return JSON.stringify(result);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExternalValidationService {\n\n  constructor() { }\n\n  externalValidation(extValObj: any){\n    //TODO: Not embedded action\n    return JSON.stringify({\n      target: extValObj.targetFields,\n      source: extValObj.validationAction,\n      label: extValObj.label\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegexService {\n\n  constructor() { }\n\n  regex(pattern: string, message?: string) {\n    return JSON.stringify({\n      pattern: {\n        value: pattern,\n        message: message || \"\"\n      }\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class CustFormBuilderModule { }\n","export function prerend() {\n    require('zone.js/dist/zone-node');\n    require('reflect-metadata');\n    const { renderModuleFactory } = require('@angular/platform-server');\n\n    const htmlparser = require(\"htmlparser2\");\n\n    // Models Declarations\n    var Layout = function () {\n        this.pages = [];\n    }\n\n    Layout.prototype.addPage = function (page) {\n        this.pages.push(page);\n    };\n\n    Layout.prototype.getPage = function (id) {\n        for (var i in this.pages) {\n            if (this.pages[i].id == id) {\n                return this.pages[i];\n            }\n        }\n        return null;\n    };\n\n    /******************************************/\n\n    var Canvas = function () {\n        this.layout = new Layout();\n        this.schema = {};\n        this.options = {};\n    };\n\n    /******************************************/\n\n    var Page = function (id, sections, title, state) {\n        this.id = id;\n        this.sections = sections;\n        this.title = title;\n        this.state = state;\n    }\n\n    Page.prototype.addSection = function (section) {\n        this.sections.push(section);\n    }\n\n    Page.prototype.getSection = function (id) {\n        for (var i in this.sections) {\n            if (this.sections[i].id == id) {\n                return this.sections[i];\n            }\n        }\n        return null;\n    }\n\n    Page.prototype.setTitle = function (title) {\n        this.title = title;\n    }\n\n    /******************************************/\n\n    var Field = function (id, display, state) {\n        this.id = id;\n        this.display = display;\n        this.state = state;\n    }\n\n    /******************************************/\n\n    var FieldSchema = function (type, constraints, label, placeholder, valueList) {\n        this.type = type;\n        this.constraints = constraints || {};\n        this.label = label || undefined;\n        this.placeholder = placeholder || undefined;\n        this.valueList = valueList || undefined;\n    }\n\n    /******************************************/\n\n    var State = function () {\n        this.visible = true;\n        this[\"read-only\"] = false;\n    }\n\n    /******************************************/\n\n    var Section = function (id, fields) {\n        this.id = id;\n        this.fields = fields;\n    }\n\n    Section.prototype.addField = function (field) {\n        this.fields.push(field);\n    }\n\n    Section.prototype.getField = function (id) {\n        for (var i in this.fields) {\n            if (this.fields[i].id == id) {\n                return this.fields[i];\n            }\n        }\n        return null;\n    }\n\n    /******************************************/\n\n    // UTILITY FUNCTIONS\n    var returnID = function (attribID, type) {\n        if (attribID == undefined || attribID == \"\") {\n            let id = type + '_', r = 'abcdefghijklmnopqrstuvwxyz0123456789';\n            for (let i = 0; i < 8; i++) {\n                id += r.charAt(Math.floor(Math.random() * r.length));\n            }\n            return id;\n        }\n        else {\n            return attribID;\n        }\n    };\n\n    /******************************************/\n\n    var valueSource = function (source, fs, path) {\n        if (IsJsonString(source)) {\n            var sourceObj = JSON.parse(source);\n            if (sourceObj.hasOwnProperty('actionName')) {\n                const convert = require('xml-js');\n                try {\n                    var xml = fs.readFileSync('../pom.xml');\n                }\n                catch (e) {\n                    console.log('valueSource() reading pom.xml:' + e);\n                }\n                var options = {\n                    ignoreComment: true,\n                    compact: true,\n                    ignoreDoctype: true,\n                    ignoreCdata: true,\n                    ignoreAttributes: true,\n                    ignoreInstruction: true,\n                    ignoreDeclaration: true,\n                };\n                var parsed = convert.xml2js(xml, options);\n                var grpartID = parsed.project.groupId._text + '/' + parsed.project.artifactId._text;\n                var packageInPathFormat = grpartID.replace(/\\./g, '/') + '/';\n\n                try {\n                    fs.writeFileSync(path.join('actions/src/main/resources/' + packageInPathFormat, sourceObj.actionName + '.js'), sourceObj.action);\n                }\n                catch (e) {\n                    console.log('valueSource() writing action files:' + e)\n                }\n                var result = {\n                    type: \"scriptAction\",\n                    id: grpartID + \"/\" + sourceObj.actionName,\n                    parameters: sourceObj.parameters\n                }\n                return result;\n\n            }\n            //Check if it's a path to action\n            else if (sourceObj.hasOwnProperty('package')) {\n                return {\n                    type: \"scriptAction\",\n                    id: sourceObj.package,\n                    parameters: sourceObj.parameters\n                }\n            }\n\n            //Checks if it's condition or computed value OR it's Action From Imported Custom Form\n            else if (sourceObj.hasOwnProperty('bind') || sourceObj.hasOwnProperty('type')) {\n                return sourceObj;\n            }\n\n        }\n        // If source is some kind of const\n        if (source == \"true\") {\n            return true;\n        }\n        else if (source == \"false\") {\n            return false;\n        }\n        else if (source.startsWith(\"[{\") || source.startsWith(\"{\") || source.startsWith(\"['\")) {\n            try {\n                return JSON.parse(source.replace(/\\'/g, '\\\"'));\n            }\n            catch (e) {\n                console.log(\"valueSource() ---> else if (source.startsWith...: \", e);\n            }\n\n        }\n        else if (isNaN(parseInt(source))) {\n            return source;\n        }\n        else {\n            return parseInt(source);\n        }\n    }\n\n    function IsJsonString(str) {\n        try {\n            JSON.parse(str);\n        } catch (e) {\n            return false;\n        }\n        return true;\n    }\n\n    /******************************************/\n\n    const checkAttributes = function (attribs, field, id, canvas, fs, path) {\n        if (attribs.visibility) {\n            field.state.visible = valueSource(attribs.visibility, fs, path);\n        }\n        if (attribs.readonly) {\n            field.state[\"read-only\"] = valueSource(attribs.readonly, fs, path);\n        }\n        if (attribs.value) {\n            canvas.schema[id].default = valueSource(attribs.value, fs, path);\n        }\n        if (attribs.valueList) {\n\n            canvas.schema[id].valueList = valueSource(attribs.valueList, fs, path);\n        }\n        if (attribs.bind) {\n            if (attribs.bind.startsWith('{')) {\n                try {\n                    canvas.schema[id].default = {\n                        bind: JSON.parse(attribs.bind.replace(/\\'/g, '\\\"'))\n                    }\n                } catch (e) {\n                    console.log(\"checkAttributes() ---> attribs.bind\", e);\n                }\n            }\n            else {\n                canvas.schema[id].default = {\n                    bind: attribs.bind\n                }\n            }\n\n        }\n        if (attribs.signpost) {\n            canvas.schema[id].signpost = attribs.signpost;\n        }\n        if (attribs.description) {\n            canvas.schema[id].description = attribs.description;\n        }\n\n        //  Constraints\n        if (attribs.required) {\n            canvas.schema[id].constraints.required = valueSource(attribs.required, fs, path);\n        }\n        if (attribs.regex) {\n            try {\n                var regexObj = JSON.parse(attribs.regex.replace(/\\'/g, '\\\"'));\n            }\n            catch (e) {\n                console.log(\"checkAttributes() ---> attribs.regex\", e);\n            }\n            // Object.assign(canvas.schema[id].constraints, regexObj);\n            canvas.schema[id].constraints[\"pattern\"] = regexObj;\n        }\n        if (attribs.min) {\n            canvas.schema[id].constraints[\"min-value\"] = valueSource(attribs.min, fs, path);\n        }\n        if (attribs.max) {\n            canvas.schema[id].constraints[\"max-value\"] = valueSource(attribs.max, fs, path);\n        }\n        if (attribs.match) {\n            canvas.schema[id].constraints.match = attribs.match;\n        }\n\n        if (!attribs.multiple || attribs.multiple == \"false\") {\n            canvas.schema[id].type.isMultiple = false;\n        }\n\n        //External Validation\n        if (attribs.options) {\n\n            try {\n                var extVal = JSON.parse(attribs.options.replace(/\\'/g, '\\\"'));\n            }\n            catch (e) {\n                console.log(\"checkAttributes() ---> attribs.options\", e);\n            }\n\n            extVal.source = valueSource(JSON.stringify(extVal.source), fs, path);\n            canvas.options[\"externalValidations\"] = [];\n            canvas.options[\"externalValidations\"].push(extVal);\n\n        }\n    }\n\n    /******************************************/\n\n    // JSON FORM GENERATION FUNCTION\n    var generateJSONForm = function (canvas, fs, path, html) {\n        canvas = new Canvas();\n        var formName = \"\";\n        var currentPage = null;\n        var currentSection = null;\n        var currentSelect = null;\n        var options = [];\n\n        //      Variables for DataGrid\n        var trID = null;\n        var dgLabels = [];\n        var dgIDs = [];\n        var dgTypes = [];\n        var dgData = [];\n        var currentDatagrid = null;\n\n\n\n        var parser = new htmlparser.Parser({\n\n            onopentag: function (name, attribs) {\n                var field = null;\n                var id = \"\";\n                var state = new State();\n\n                switch (name) {\n                    //The Form\n                    case \"div\":\n                        if (attribs.class == \"custom-form\") {\n                            formName = attribs.name;\n                        }\n                        else {\n                            formName = \"defautFormName\";\n                        }\n                        break;\n\n                    //  Page/Tab\n                    case \"form\":\n                        if (currentPage == null) {\n                            currentPage = new Page(attribs.id || \"General\", [], attribs.title || \"General\", {});\n                        } else {\n                            currentPage = new Page(returnID(attribs.id, \"page\"), [], attribs.title || \"New Tab\", {});\n                        }\n                        if (attribs.visibility) {\n                            currentPage.state.visible = valueSource(attribs.visibility, fs, path);\n                        }\n                        canvas.layout.addPage(currentPage);\n                        break;\n\n                    //  Section    \n                    case \"section\":\n                        currentSection = new Section(returnID(attribs.id, \"section\"), []);\n                        canvas.layout.getPage(currentPage.id).addSection(currentSection);\n                        break;\n\n\n                    case \"input\":\n                        switch (attribs.type) {\n\n                            //  Text Field\n                            case \"text\":\n                                id = returnID(attribs.id, \"textField\");\n                                field = new Field(id, \"textField\", state);\n                                canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                                canvas.schema[id] = new FieldSchema({ dataType: \"string\" }, {}, attribs.label, attribs.placeholder, undefined);\n                                checkAttributes(attribs, field, id, canvas, fs, path);\n                                break;\n\n                            // Password Field\n                            case \"password\":\n                                id = returnID(attribs.id, \"passwordField\");\n                                field = new Field(id, \"passwordField\", state);\n                                canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                                canvas.schema[id] = new FieldSchema({ dataType: \"secureString\" }, {}, attribs.label, attribs.placeholder, undefined);\n                                checkAttributes(attribs, field, id, canvas, fs, path);\n                                break;\n\n                            // Decimal or Integer Field\n                            case \"number\":\n                                if (attribs.step && attribs.step.startsWith(\"0.\")) {\n                                    id = returnID(attribs.id, \"decimalField\");\n                                    field = new Field(id, \"decimalField\", state);\n                                    canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                                    canvas.schema[id] = new FieldSchema({ dataType: \"decimal\" }, {}, attribs.label, attribs.placeholder, undefined);\n                                    checkAttributes(attribs, field, id, canvas, fs, path);\n                                    canvas.schema[id].step = parseInt(attribs.step);\n                                }\n                                else {\n                                    id = returnID(attribs.id, \"integerField\");\n                                    field = new Field(id, \"integerField\", state);\n                                    canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                                    canvas.schema[id] = new FieldSchema({ dataType: \"integer\" }, {}, attribs.label, attribs.placeholder, undefined);\n                                    checkAttributes(attribs, field, id, canvas, fs, path);\n                                    canvas.schema[id].step = parseInt(attribs.step) || 1;\n                                }\n                                break;\n\n                            // CheckBox\n\n                            case \"checkbox\":\n                                id = returnID(attribs.id, \"checkbox\");\n                                field = new Field(id, \"checkbox\", state);\n                                canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                                canvas.schema[id] = new FieldSchema({ dataType: \"boolean\" }, {}, attribs.label, attribs.placeholder, undefined);\n                                checkAttributes(attribs, field, id, canvas, fs, path);\n                                break;\n                        }\n                        break;\n\n                    //  Text Area\n                    case \"textarea\":\n                        id = returnID(attribs.id, \"textArea\");\n                        field = new Field(id, \"textArea\", state);\n                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                        canvas.schema[id] = new FieldSchema({ dataType: \"string\" }, {}, attribs.label, attribs.placeholder, undefined);\n                        checkAttributes(attribs, field, id, canvas, fs, path);\n                        break;\n\n                    //  Text / Label\n                    case \"label\":\n                        id = returnID(attribs.id, \"text\");\n                        field = new Field(id, \"text\", state);\n                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                        canvas.schema[id] = new FieldSchema({ dataType: \"string\" }, {}, attribs.label, attribs.placeholder, undefined);\n                        checkAttributes(attribs, field, id, canvas, fs, path);\n                        break;\n\n                    //  Image\n                    case \"img\":\n                        id = returnID(attribs.id, \"image\");\n                        field = new Field(id, \"image\", state);\n                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                        canvas.schema[id] = new FieldSchema({ dataType: \"string\" }, {}, attribs.label, attribs.placeholder, undefined);\n                        checkAttributes(attribs, field, id, canvas, fs, path);\n                        break;\n\n\n                    //  DATAGRID\n                    case \"table\":\n                        var field = null;\n                        id = returnID(attribs.id, \"datagrid\");\n                        currentDatagrid = id;\n                        field = new Field(id, \"datagrid\", state);\n                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                        canvas.schema[id] = new FieldSchema({ dataType: \"complex\", \"fields\": [], isMultiple: true }, {}, attribs.label, attribs.placeholder, options);\n                        checkAttributes(attribs, field, id, canvas, fs, path);\n                        break;\n\n                    case \"tr\":\n                        trID = attribs.id;\n                        if (attribs.value) {\n                            canvas.schema[currentDatagrid].default = valueSource(attribs.value, fs, path);\n                        }\n                        // TODO: TEST\n                        break;\n\n                    case \"th\":\n                        dgIDs.push(attribs.id);\n                        dgTypes.push(attribs.type);\n                        break\n\n                    case \"td\":\n                        break;\n\n                    //  Multiselect or Dropdown\n                    case \"select\":\n\n                        if (attribs.multiple == \"true\") {\n                            currentSelect = id = returnID(attribs.id, \"multiSelect\");\n                            field = new Field(id, \"multiSelect\", state);\n                            canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                            canvas.schema[id] = new FieldSchema({ dataType: \"string\", isMultiple: true }, {}, attribs.label, attribs.placeholder, options);\n                        }\n                        else {\n                            currentSelect = id = returnID(attribs.id, \"dropDown\");\n                            field = new Field(id, \"dropDown\", state);\n                            canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                            canvas.schema[id] = new FieldSchema({ dataType: \"string\" }, {}, attribs.label, attribs.placeholder, options);\n                        }\n                        checkAttributes(attribs, field, id, canvas, fs, path);\n                        break;\n\n                    //  Value Picker\n                    case \"search\":\n                        id = returnID(attribs.id, \"valuePicker\");\n                        field = new Field(id, \"valuePicker\", state);\n                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                        canvas.schema[id] = new FieldSchema({ dataType: \"reference\", referenceType: attribs.referenceType }, {}, attribs.label, attribs.placeholder, options || []);\n                        checkAttributes(attribs, field, id, canvas, fs, path);\n                        break;\n\n                    //  Date Time Picker\n                    case \"date\":\n                        id = returnID(attribs.id, \"dateTime\");\n                        field = new Field(id, \"dateTime\", state);\n                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);\n                        canvas.schema[id] = new FieldSchema({ dataType: \"dateTime\" }, {}, attribs.label, attribs.placeholder, undefined);\n                        checkAttributes(attribs, field, id, canvas, fs, path);\n                        break;\n                }\n            },\n            ontext: function (text) {\n                //      SELECT & MULTISELECT OPTIONS\n                if (currentSelect != null) {\n                    options.push(valueSource(text, fs, path));\n                }\n                //      DATAGRID\n                if (trID == \"cols\") {\n                    dgLabels.push(valueSource(text, fs, path));\n                }\n                if (trID == \"data\") {\n                    dgData.push(valueSource(text, fs, path));\n                }\n\n            },\n            onclosetag: function (tagname) {\n                if (tagname === \"select\" && options.length > 0) {\n                    canvas.schema[currentSelect].valueList = options;\n                    currentSelect = null;\n                    options = [];\n                }\n\n                //      DATAGRID\n\n                if (tagname === \"table\") {\n                    canvas.schema[currentDatagrid][\"type\"][\"fields\"] = [];\n                    canvas.schema[currentDatagrid][\"default\"] = [];\n                    for (var i in dgLabels) {\n                        canvas.schema[currentDatagrid][\"type\"][\"fields\"].push(\n                            {\n                                \"label\": dgLabels[i],\n                                \"id\": dgIDs[i],\n                                \"type\": {\n                                    \"dataType\": dgTypes[i]\n                                }\n                            });\n                    }\n                    var cnt = 0;\n                    var data = {};\n                    for (var j in dgData) {\n                        data[dgIDs[cnt]] = dgData[j];\n                        cnt++;\n                        if (cnt > 2) {\n                            cnt = 0;\n                            canvas.schema[currentDatagrid][\"default\"].push(data);\n                            data = {};\n                        }\n                    }\n\n                    currentDatagrid = null;\n                    dgIDs = [];\n                    dgData = [];\n                    dgLabels = [];\n                    dgTypes = [];\n                }\n\n            }\n\n        }, { decodeEntities: true });\n\n        parser.write(html);\n        parser.end();\n\n        return {\n            name: formName,\n            form: canvas\n        };\n\n\n    }\n\n\n    /******************************************/\n\n    // PRERENDER\n    const fs = require('fs');\n    const path = require('path');\n    const { AppServerModuleNgFactory } = require('../../../dist/custom-form-server/main');\n\n    renderModuleFactory(AppServerModuleNgFactory, {\n        document: '<app-root></app-root>',\n        url: '/'\n    })\n        .then(html => {\n            var generated = generateJSONForm(canvas, fs, path, html);\n            var canvas = generated.form;\n            var name = generated.name;\n            try {\n                fs.writeFileSync(path.join('bin/', name + '.json'), JSON.stringify(canvas));\n            }\n            catch (e) {\n                console.log('renderModuleFactory creating the custom form json file: ' + e);\n            }\n        })\n        .catch((err) => {\n            console.log(err.message)\n        });\n}\n","export function importForm(formPath) {\n    const fsys = require('fs');\n    const pathh = require('path');\n\n    try {\n        var form = JSON.parse(fsys.readFileSync(`${formPath}.json`, 'utf8'));\n    }\n    catch (e) {\n        console.log('ERROR importForm() reading the custom form json file :' + e);\n    }\n    var htmlForm = `<div class=\"custom-form\" name=\"${formPath.substring(formPath.lastIndexOf('/') + 1)}\">`;\n\n    for (var page in form['layout']['pages']) {\n        htmlForm += `<form id=\"${form['layout']['pages'][page]['id']}\" title=\"${form['layout']['pages'][page]['title']}\"`;\n        if (form['layout']['pages'][page]['state']['visible']) {\n            htmlForm += ` visibility=\"${form['layout']['pages'][page]['state']['visible']}\"`;\n        }\n        htmlForm += `>`;\n        for (var section in form['layout']['pages'][page]['sections']) {\n            htmlForm += `<section id=\"${form['layout']['pages'][page]['sections'][section]['id']}\">`;\n            for (var field in form['layout']['pages'][page]['sections'][section]['fields']) {\n\n                var fieldID = form['layout']['pages'][page]['sections'][section]['fields'][field]['id'];\n                var basicAttributes = `id=\"${fieldID}\"\n                    visibility=\"${JSON.stringify(form['layout']['pages'][page]['sections'][section]['fields'][field]['state']['visible']).replace(/\\\"/g, '\\'')}\"\n                    readonly=\"${JSON.stringify(form['layout']['pages'][page]['sections'][section]['fields'][field]['state']['read-only']).replace(/\\\"/g, '\\'')}\"`;\n                var closingTag = ``;\n                var fieldType = form['layout']['pages'][page]['sections'][section]['fields'][field]['display'];\n\n\n                switch (fieldType) {\n                    case 'text':\n                        htmlForm += `<label ` + basicAttributes;\n                        closingTag = `</label>`\n                        break;\n                    case 'textArea':\n                        htmlForm += `<textarea ` + basicAttributes;\n                        closingTag = `</textarea>`;\n                        break;\n                    case 'textField':\n                        htmlForm += `<input type=\"text\" ` + basicAttributes;\n                        break;\n                    case 'passwordField':\n                        htmlForm += `<input type=\"password\" ` + basicAttributes;\n                        break;\n                    case 'decimalField':\n                        htmlForm += `<input type=\"number\" step =\"0.\"` + basicAttributes;\n                        break;\n                    case 'integerField':\n                        htmlForm += `<input type=\"number\" ` + basicAttributes;\n                        break;\n                    case 'image':\n                        htmlForm += `<img ` + basicAttributes;\n                        break;\n                    case 'checkbox':\n                        htmlForm += `<input type=\"checkbox\" ` + basicAttributes;\n                        break;\n                    case 'dropDown':\n                        htmlForm += `<select ` + basicAttributes;\n                        closingTag = `</select>`\n                        break;\n                    case 'multiSelect':\n                        htmlForm += `<select multiple=\"true\" ` + basicAttributes;\n                        closingTag = `</select>`\n                        break;\n                    case 'datagrid':\n                        htmlForm += `<table ` + basicAttributes;\n                        closingTag = `</table>`\n                        break;\n                }\n\n                if (form['schema'][fieldID]['constraints']) {\n                    if (form['schema'][fieldID]['constraints']['required']) {\n                        htmlForm += ` required=\"${JSON.stringify(form['schema'][fieldID]['constraints']['required']).replace(/\\\"/g, '\\'')}\"`;\n                    }\n                    if (form['schema'][fieldID]['constraints']['min-value']) {\n                        htmlForm += ` min=\"${JSON.stringify(form['schema'][fieldID]['constraints']['min-value']).replace(/\\\"/g, '\\'')}\"`;\n                    }\n                    if (form['schema'][fieldID]['constraints']['max-value']) {\n                        htmlForm += ` max=\"${JSON.stringify(form['schema'][fieldID]['constraints']['max-value']).replace(/\\\"/g, '\\'')}\"`;\n                    }\n                    if (form['schema'][fieldID]['constraints']['pattern']) {\n                        htmlForm += ` regex=\"${JSON.stringify({\n                            value: form['schema'][fieldID]['constraints']['pattern']['value'],\n                            message: form['schema'][fieldID]['constraints']['pattern']['message']\n                        }).replace(/\\\"/g, '\\'')}\"`;\n                    }\n                    if (form['schema'][fieldID]['constraints']['match']) {\n                        htmlForm += ` match=\"${JSON.stringify(form['schema'][fieldID]['constraints']['match']).replace(/\\\"/g, '\\'')}\"`;\n                    }\n\n                }\n                if (form['schema'][fieldID]['default']) {\n                    if (form['schema'][fieldID]['default']['type'] == 'scriptAction' ||\n                        Array.isArray(form['schema'][fieldID]['default'])) {\n                        htmlForm += ` value=\"${JSON.stringify(form['schema'][fieldID]['default']).replace(/\\\"/g, '\\'')}\"`;\n                        // .replace(/\\{/g, '{{ \\'{\\' }}').replace(/\\}/g, '{{ \\'}\\' }}')}\"`;\n                    }\n                    else if (form['schema'][fieldID]['default']['bind']) {\n                        if (JSON.stringify(form['schema'][fieldID]['default']['bind']).startsWith('{')) {\n                            htmlForm += ` bind=\"${JSON.stringify(form['schema'][fieldID]['default']['bind']).replace(/\\\"/g, '\\'')}\"`;\n                        }\n                        else {\n                            htmlForm += ` bind=\"${JSON.stringify(form['schema'][fieldID]['default']['bind']).replace(/\\\"/g, '')}\"`;\n                        }\n\n                    }\n                    else {\n                        htmlForm += ` value=\"${JSON.stringify(form['schema'][fieldID]['default']).replace(/\\\"/g, '')}\"`;\n                    }\n                }\n                if (form['schema'][fieldID]['valueList']) {\n\n                    if (form['schema'][fieldID]['valueList']['type'] == 'scriptAction') {\n                        htmlForm += ` valueList=\"${JSON.stringify(form['schema'][fieldID]['valueList']).replace(/\\\"/g, '\\'')}\"`;\n                        // .replace(/\\{/g, '{{ \\'{\\' }}').replace(/\\}/g, '{{ \\'}\\' }}')}\"`;\n                    }\n                    else {\n                        var valueList = ``;\n                        for (var opt in form['schema'][fieldID]['valueList']) {\n                            if (form['schema'][fieldID]['valueList'][opt]['label']) {\n                                valueList += `<option label=\"${form['schema'][fieldID]['valueList'][opt]['label']}\">${form['schema'][fieldID]['valueList'][opt]['label']}</option>`;\n                            }\n                            else {\n                                valueList += `<option>${JSON.stringify(form['schema'][fieldID]['valueList'][opt]).replace(/\\\"/g, '')}</option>`;\n                            }\n\n                        }\n                    }\n\n                }\n\n                if (form['schema'][fieldID]['label']) {\n                    htmlForm += ` label=\"${form['schema'][fieldID]['label']}\"`;\n                }\n                if (form['schema'][fieldID]['description']) {\n                    htmlForm += ` description=\"${JSON.stringify(form['schema'][fieldID]['description']).replace(/\\\"/g, '')}\"`;\n                }\n                if (form['schema'][fieldID]['signpost']) {\n                    htmlForm += ` signpost=\"${JSON.stringify(form['schema'][fieldID]['signpost']).replace(/\\\"/g, '\\'')}\"`;\n                }\n                if (form['schema'][fieldID]['step']) {\n                    htmlForm += ` step=\"${JSON.stringify(form['schema'][fieldID]['step']).replace(/\\\"/g, '\\'')}\"`;\n                }\n                if (form['schema'][fieldID]['placeholder']) {\n                    htmlForm += ` step=\"${JSON.stringify(form['schema'][fieldID]['placeholder']).replace(/\\\"/g, '')}\"`;\n                }\n\n                //      DATAGRID\n\n                if (form['schema'][fieldID]['type']['fields']) {\n                    var dgFields = `<tr id='cols'>`;\n                    for (var fld in form['schema'][fieldID]['type']['fields']) {\n                        dgFields += `<th id='` + form['schema'][fieldID]['type']['fields'][fld]['id'] + `' `\n                            + `type='` + form['schema'][fieldID]['type']['fields'][fld]['type']['dataType'] + `' `\n                            + `description='` + form['schema'][fieldID]['type']['fields'][fld]['id'] + `'>`\n                            + form['schema'][fieldID]['type']['fields'][fld]['label'] + `</th>`;\n                    }\n                    dgFields += `</tr>`;\n\n                    if (form['schema'][fieldID]['default']) {\n                        var dgData = ``;\n                        if (form['schema'][fieldID]['default']['type'] == \"scriptAction\") {\n                            dgData += `<tr id='data' value=\"${JSON.stringify(form['schema'][fieldID]['default']).replace(/\\\"/g, '\\'')}\" ></tr>`;\n                        }\n                        else {\n                            var colsLen = form['schema'][fieldID]['type']['fields'].length;\n                            var cnt = 0;\n                            for (var entity in form['schema'][fieldID]['default']) {\n                                dgData += `<tr id='data'>`;\n                                for (var data in form['schema'][fieldID]['default'][entity]) {\n                                    if (cnt < colsLen) {\n                                        dgData += `<td>` + form['schema'][fieldID]['default'][entity][data] + `</td>`;\n                                        cnt++;\n                                    }\n                                }\n                                dgData += `</tr>`;\n                            }\n                        }\n                    }\n                }\n\n                if (form['options']['externalValidations']) {\n                    for (var extVal in form['options']['externalValidations']) {\n                        for (var id in form['options']['externalValidations'][extVal]['target']) {\n                            if (fieldID == form['options']['externalValidations'][extVal]['target'][id]) {\n                                htmlForm += ` options=\"${JSON.stringify(form['options']['externalValidations'][extVal]).replace(/\\\"/g, '\\'')}\"`;\n                            }\n                        }\n                    }\n                }\n\n                htmlForm += `>`;\n                if ((fieldType == 'dropDown' || fieldType == 'multiSelect') && valueList) {\n                    htmlForm += valueList;\n                    valueList = ``;\n                }\n                //      DATAGRID\n                if (fieldType == 'datagrid') {\n                    htmlForm += dgFields;\n                    htmlForm += dgData;\n\n                }\n                htmlForm += closingTag;\n            }\n            htmlForm += `</section>`;\n        }\n        htmlForm += `</form>`;\n    }\n\n\n    htmlForm += `</div>`\n\n    try {\n        // fsys.truncateSync(pathh.join('src/app', 'app.component.html'), '');\n        fsys.writeFileSync(pathh.join('src/app', 'app.component.html'), htmlForm);\n    }\n    catch (e) {\n        console.log('ERROR importForm() writing to the app.component.html file:' + e);\n    }\n\n}\n"]}