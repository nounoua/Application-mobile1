/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class ConditionService {
    constructor() { }
    /**
     * @param {?} cond
     * @return {?}
     */
    condition(cond) {
        /** @type {?} */
        var origMethod = cond.toString();
        /** @type {?} */
        var lines = origMethod.substring(origMethod.indexOf("{") + 1, origMethod.lastIndexOf("}")).split("\n");
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var conditionVal = null;
        /** @type {?} */
        var val = null;
        for (var i = 0; i < lines.length; i++) {
            if (lines[i].trim().startsWith("if")) {
                conditionVal = lines[i].substring(lines[i].indexOf("\"") + 1, lines[i].lastIndexOf("\""));
                val = lines[i + 1].substring(lines[i + 1].indexOf("\"") + 1, lines[i + 1].lastIndexOf("\""));
                if (conditionVal == "true") {
                    conditionVal = true;
                }
                if (conditionVal == "false") {
                    conditionVal = false;
                }
                if (val == "true") {
                    val = true;
                }
                if (val == "false") {
                    val = false;
                }
                result.push({
                    [lines[i].substring(lines[i].indexOf(".") + 1, lines[i].lastIndexOf("("))]: {
                        [lines[i].substring(lines[i].indexOf("(") + 1, lines[i].indexOf("."))]: conditionVal
                    },
                    value: val
                });
            }
        }
        return JSON.stringify(result);
    }
}
ConditionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ConditionService.ctorParameters = () => [];
/** @nocollapse */ ConditionService.ngInjectableDef = i0.defineInjectable({ factory: function ConditionService_Factory() { return new ConditionService(); }, token: ConditionService, providedIn: "root" });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jdXN0LWZvcm0tYnVpbGRlci8iLCJzb3VyY2VzIjpbImxpYi9jb25kaXRpb25TZXJ2aWNlL2NvbmRpdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNO0lBRUosaUJBQWlCOzs7OztJQUVqQixTQUFTLENBQUMsSUFBUzs7UUFDakIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDOztRQUNqQyxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7O1FBQ3ZHLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQzs7UUFDaEIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDOztRQUN4QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFFZixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3BDLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDMUYsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUU3RixJQUFJLFlBQVksSUFBSSxNQUFNLEVBQUU7b0JBQzFCLFlBQVksR0FBRyxJQUFJLENBQUM7aUJBQ3JCO2dCQUNELElBQUksWUFBWSxJQUFJLE9BQU8sRUFBRTtvQkFDM0IsWUFBWSxHQUFHLEtBQUssQ0FBQztpQkFDdEI7Z0JBQ0QsSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO29CQUNqQixHQUFHLEdBQUcsSUFBSSxDQUFDO2lCQUNaO2dCQUNELElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRTtvQkFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQztpQkFDYjtnQkFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO29CQUNWLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDMUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUNwRSxZQUFZO3FCQUNmO29CQUNELEtBQUssRUFBRSxHQUFHO2lCQUNYLENBQUMsQ0FBQzthQUNKO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDL0I7OztZQTFDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvbmRpdGlvblNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgY29uZGl0aW9uKGNvbmQ6IGFueSkge1xuICAgIHZhciBvcmlnTWV0aG9kID0gY29uZC50b1N0cmluZygpO1xuICAgIHZhciBsaW5lcyA9IG9yaWdNZXRob2Quc3Vic3RyaW5nKG9yaWdNZXRob2QuaW5kZXhPZihcIntcIikgKyAxLCBvcmlnTWV0aG9kLmxhc3RJbmRleE9mKFwifVwiKSkuc3BsaXQoXCJcXG5cIik7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBjb25kaXRpb25WYWwgPSBudWxsO1xuICAgIHZhciB2YWwgPSBudWxsO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpbmVzW2ldLnRyaW0oKS5zdGFydHNXaXRoKFwiaWZcIikpIHtcbiAgICAgICAgY29uZGl0aW9uVmFsID0gbGluZXNbaV0uc3Vic3RyaW5nKGxpbmVzW2ldLmluZGV4T2YoXCJcXFwiXCIpICsgMSwgbGluZXNbaV0ubGFzdEluZGV4T2YoXCJcXFwiXCIpKTtcbiAgICAgICAgdmFsID0gbGluZXNbaSArIDFdLnN1YnN0cmluZyhsaW5lc1tpICsgMV0uaW5kZXhPZihcIlxcXCJcIikgKyAxLCBsaW5lc1tpICsgMV0ubGFzdEluZGV4T2YoXCJcXFwiXCIpKTtcblxuICAgICAgICBpZiAoY29uZGl0aW9uVmFsID09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgY29uZGl0aW9uVmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZGl0aW9uVmFsID09IFwiZmFsc2VcIikge1xuICAgICAgICAgIGNvbmRpdGlvblZhbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwgPT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICB2YWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwgPT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgdmFsID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgW2xpbmVzW2ldLnN1YnN0cmluZyhsaW5lc1tpXS5pbmRleE9mKFwiLlwiKSArIDEsIGxpbmVzW2ldLmxhc3RJbmRleE9mKFwiKFwiKSldOiB7XG4gICAgICAgICAgICBbbGluZXNbaV0uc3Vic3RyaW5nKGxpbmVzW2ldLmluZGV4T2YoXCIoXCIpICsgMSwgbGluZXNbaV0uaW5kZXhPZihcIi5cIikpXTpcbiAgICAgICAgICAgICAgY29uZGl0aW9uVmFsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB2YWx1ZTogdmFsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgfVxuXG59XG4iXX0=