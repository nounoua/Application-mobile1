/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class ActionService {
    constructor() { }
    /**
     * @param {?} metadata
     * @param {?} originalMethod
     * @return {?}
     */
    externalAction(metadata, originalMethod) {
        /** @type {?} */
        var action = "/**\n";
        /** @type {?} */
        var parameters = [];
        /** @type {?} */
        var i = 0;
        for (var key in metadata.parameters) {
            action += "* @param {" + metadata.parameters[key] + "} " + key + "\n";
            parameters.push({ [key]: metadata.args[i] });
            i++;
        }
        action += "* @returns {" + metadata.returnType + "}\n*/\n(" + originalMethod.toString() + ")();";
        return JSON.stringify({
            actionName: metadata.actionName,
            action: action,
            parameters: parameters,
            args: metadata.args
        });
    }
    /**
     * @param {?} metadata
     * @return {?}
     */
    actionFromPackage(metadata) {
        return JSON.stringify({
            package: metadata.package,
            parameters: metadata.parameters
        });
    }
}
ActionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ActionService.ctorParameters = () => [];
/** @nocollapse */ ActionService.ngInjectableDef = i0.defineInjectable({ factory: function ActionService_Factory() { return new ActionService(); }, token: ActionService, providedIn: "root" });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jdXN0LWZvcm0tYnVpbGRlci8iLCJzb3VyY2VzIjpbImxpYi9hY3Rpb25TZXJ2aWNlL2FjdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNO0lBRUosaUJBQWlCOzs7Ozs7SUFFakIsY0FBYyxDQUFDLFFBQWEsRUFBRSxjQUFtQjs7UUFDL0MsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDOztRQUNyQixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7O1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLEtBQUssSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRTtZQUNuQyxNQUFNLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7WUFDdEUsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0MsQ0FBQyxFQUFFLENBQUM7U0FDTDtRQUNELE1BQU0sSUFBSSxjQUFjLEdBQUcsUUFBUSxDQUFDLFVBQVUsR0FBRyxVQUFVLEdBQUcsY0FBYyxDQUFDLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUVqRyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDcEIsVUFBVSxFQUFFLFFBQVEsQ0FBQyxVQUFVO1lBQy9CLE1BQU0sRUFBRSxNQUFNO1lBQ2QsVUFBVSxFQUFFLFVBQVU7WUFDdEIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJO1NBQ3BCLENBQUMsQ0FBQztLQUNKOzs7OztJQUdELGlCQUFpQixDQUFDLFFBQWE7UUFDN0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3BCLE9BQU8sRUFBRSxRQUFRLENBQUMsT0FBTztZQUN6QixVQUFVLEVBQUUsUUFBUSxDQUFDLFVBQVU7U0FDaEMsQ0FBQyxDQUFDO0tBQ0o7OztZQWhDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFjdGlvblNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgZXh0ZXJuYWxBY3Rpb24obWV0YWRhdGE6IGFueSwgb3JpZ2luYWxNZXRob2Q6IGFueSkge1xuICAgIHZhciBhY3Rpb24gPSBcIi8qKlxcblwiO1xuICAgIHZhciBwYXJhbWV0ZXJzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAodmFyIGtleSBpbiBtZXRhZGF0YS5wYXJhbWV0ZXJzKSB7XG4gICAgICBhY3Rpb24gKz0gXCIqIEBwYXJhbSB7XCIgKyBtZXRhZGF0YS5wYXJhbWV0ZXJzW2tleV0gKyBcIn0gXCIgKyBrZXkgKyBcIlxcblwiO1xuICAgICAgcGFyYW1ldGVycy5wdXNoKHsgW2tleV06IG1ldGFkYXRhLmFyZ3NbaV0gfSk7XG4gICAgICBpKys7XG4gICAgfVxuICAgIGFjdGlvbiArPSBcIiogQHJldHVybnMge1wiICsgbWV0YWRhdGEucmV0dXJuVHlwZSArIFwifVxcbiovXFxuKFwiICsgb3JpZ2luYWxNZXRob2QudG9TdHJpbmcoKSArIFwiKSgpO1wiO1xuXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGFjdGlvbk5hbWU6IG1ldGFkYXRhLmFjdGlvbk5hbWUsXG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIHBhcmFtZXRlcnM6IHBhcmFtZXRlcnMsXG4gICAgICBhcmdzOiBtZXRhZGF0YS5hcmdzXG4gICAgfSk7XG4gIH1cblxuXG4gIGFjdGlvbkZyb21QYWNrYWdlKG1ldGFkYXRhOiBhbnkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgcGFja2FnZTogbWV0YWRhdGEucGFja2FnZSxcbiAgICAgIHBhcmFtZXRlcnM6IG1ldGFkYXRhLnBhcmFtZXRlcnNcbiAgICB9KTtcbiAgfVxufVxuIl19