/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class ComputedValueService {
    constructor() { }
    /**
     * @param {...?} values
     * @return {?}
     */
    concat(...values) {
        /** @type {?} */
        var result = {
            bind: {
                values: [],
                operator: "concat"
            }
        };
        for (var i in values) {
            result.bind.values.push(values[i]);
        }
        return JSON.stringify(result);
    }
    /**
     * @param {...?} values
     * @return {?}
     */
    add(...values) {
        /** @type {?} */
        var obj = {
            bind: {
                values: [],
                operator: "add"
            }
        };
        for (var i in values) {
            obj.bind.values.push(values[i]);
        }
        return JSON.stringify(obj);
    }
    /**
     * @param {...?} values
     * @return {?}
     */
    substract(...values) {
        /** @type {?} */
        var obj = {
            bind: {
                values: [],
                operator: "substract"
            }
        };
        for (var i in values) {
            obj.bind.values.push(values[i]);
        }
        return JSON.stringify(obj);
    }
    /**
     * @param {...?} values
     * @return {?}
     */
    multiply(...values) {
        /** @type {?} */
        var obj = {
            bind: {
                values: [],
                operator: "multiply"
            }
        };
        for (var i in values) {
            obj.bind.values.push(values[i]);
        }
        return JSON.stringify(obj);
    }
}
ComputedValueService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ComputedValueService.ctorParameters = () => [];
/** @nocollapse */ ComputedValueService.ngInjectableDef = i0.defineInjectable({ factory: function ComputedValueService_Factory() { return new ComputedValueService(); }, token: ComputedValueService, providedIn: "root" });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZWQtdmFsdWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2N1c3QtZm9ybS1idWlsZGVyLyIsInNvdXJjZXMiOlsibGliL2NvbXB1dGVkVmFsdWVTZXJ2aWNlL2NvbXB1dGVkLXZhbHVlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDLE1BQU07SUFFSixpQkFBaUI7Ozs7O0lBRWpCLE1BQU0sQ0FBQyxHQUFHLE1BQWdCOztRQUN4QixJQUFJLE1BQU0sR0FBRztZQUNYLElBQUksRUFBRTtnQkFDSixNQUFNLEVBQUUsRUFBRTtnQkFDVixRQUFRLEVBQUUsUUFBUTthQUNuQjtTQUNGLENBQUM7UUFDRixLQUFLLElBQUksQ0FBQyxJQUFJLE1BQU0sRUFBRTtZQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEM7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDL0I7Ozs7O0lBRUQsR0FBRyxDQUFDLEdBQUcsTUFBZ0I7O1FBQ3JCLElBQUksR0FBRyxHQUFHO1lBQ1IsSUFBSSxFQUFFO2dCQUNKLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFFBQVEsRUFBRSxLQUFLO2FBQ2hCO1NBQ0YsQ0FBQztRQUNGLEtBQUssSUFBSSxDQUFDLElBQUksTUFBTSxFQUFFO1lBQ3BCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQztRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUM1Qjs7Ozs7SUFFRCxTQUFTLENBQUMsR0FBRyxNQUFnQjs7UUFDM0IsSUFBSSxHQUFHLEdBQUc7WUFDUixJQUFJLEVBQUU7Z0JBQ0osTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsUUFBUSxFQUFFLFdBQVc7YUFDdEI7U0FDRixDQUFDO1FBQ0YsS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDcEIsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzVCOzs7OztJQUVELFFBQVEsQ0FBQyxHQUFHLE1BQWdCOztRQUMxQixJQUFJLEdBQUcsR0FBRztZQUNSLElBQUksRUFBRTtnQkFDSixNQUFNLEVBQUUsRUFBRTtnQkFDVixRQUFRLEVBQUUsVUFBVTthQUNyQjtTQUNGLENBQUM7UUFDRixLQUFLLElBQUksQ0FBQyxJQUFJLE1BQU0sRUFBRTtZQUNwQixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakM7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUI7OztZQXpERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvbXB1dGVkVmFsdWVTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIGNvbmNhdCguLi52YWx1ZXM6IHN0cmluZ1tdKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIGJpbmQ6IHtcbiAgICAgICAgdmFsdWVzOiBbXSxcbiAgICAgICAgb3BlcmF0b3I6IFwiY29uY2F0XCJcbiAgICAgIH1cbiAgICB9O1xuICAgIGZvciAodmFyIGkgaW4gdmFsdWVzKSB7XG4gICAgICByZXN1bHQuYmluZC52YWx1ZXMucHVzaCh2YWx1ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgfVxuXG4gIGFkZCguLi52YWx1ZXM6IHN0cmluZ1tdKSB7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGJpbmQ6IHtcbiAgICAgICAgdmFsdWVzOiBbXSxcbiAgICAgICAgb3BlcmF0b3I6IFwiYWRkXCJcbiAgICAgIH1cbiAgICB9O1xuICAgIGZvciAodmFyIGkgaW4gdmFsdWVzKSB7XG4gICAgICBvYmouYmluZC52YWx1ZXMucHVzaCh2YWx1ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTtcbiAgfVxuXG4gIHN1YnN0cmFjdCguLi52YWx1ZXM6IHN0cmluZ1tdKSB7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGJpbmQ6IHtcbiAgICAgICAgdmFsdWVzOiBbXSxcbiAgICAgICAgb3BlcmF0b3I6IFwic3Vic3RyYWN0XCJcbiAgICAgIH1cbiAgICB9O1xuICAgIGZvciAodmFyIGkgaW4gdmFsdWVzKSB7XG4gICAgICBvYmouYmluZC52YWx1ZXMucHVzaCh2YWx1ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTtcbiAgfVxuXG4gIG11bHRpcGx5KC4uLnZhbHVlczogc3RyaW5nW10pIHtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgYmluZDoge1xuICAgICAgICB2YWx1ZXM6IFtdLFxuICAgICAgICBvcGVyYXRvcjogXCJtdWx0aXBseVwiXG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBpIGluIHZhbHVlcykge1xuICAgICAgb2JqLmJpbmQudmFsdWVzLnB1c2godmFsdWVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XG4gIH1cblxufVxuIl19