/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
export function prerend() {
    require('zone.js/dist/zone-node');
    require('reflect-metadata');
    var renderModuleFactory = require('@angular/platform-server').renderModuleFactory;
    /** @type {?} */
    var htmlparser = require("htmlparser2");
    /** @type {?} */
    var Layout = function () {
        this.pages = [];
    };
    Layout.prototype.addPage = function (page) {
        this.pages.push(page);
    };
    Layout.prototype.getPage = function (id) {
        for (var i in this.pages) {
            if (this.pages[i].id == id) {
                return this.pages[i];
            }
        }
        return null;
    };
    /** *
     * **************************************
      @type {?} */
    var Canvas = function () {
        this.layout = new Layout();
        this.schema = {};
        this.options = {};
    };
    /** *
     * **************************************
      @type {?} */
    var Page = function (id, sections, title, state) {
        this.id = id;
        this.sections = sections;
        this.title = title;
        this.state = state;
    };
    Page.prototype.addSection = function (section) {
        this.sections.push(section);
    };
    Page.prototype.getSection = function (id) {
        for (var i in this.sections) {
            if (this.sections[i].id == id) {
                return this.sections[i];
            }
        }
        return null;
    };
    Page.prototype.setTitle = function (title) {
        this.title = title;
    };
    /** *
     * **************************************
      @type {?} */
    var Field = function (id, display, state) {
        this.id = id;
        this.display = display;
        this.state = state;
    };
    /** *
     * **************************************
      @type {?} */
    var FieldSchema = function (type, constraints, label, placeholder, valueList) {
        this.type = type;
        this.constraints = constraints || {};
        this.label = label || undefined;
        this.placeholder = placeholder || undefined;
        this.valueList = valueList || undefined;
    };
    /** *
     * **************************************
      @type {?} */
    var State = function () {
        this.visible = true;
        this["read-only"] = false;
    };
    /** *
     * **************************************
      @type {?} */
    var Section = function (id, fields) {
        this.id = id;
        this.fields = fields;
    };
    Section.prototype.addField = function (field) {
        this.fields.push(field);
    };
    Section.prototype.getField = function (id) {
        for (var i in this.fields) {
            if (this.fields[i].id == id) {
                return this.fields[i];
            }
        }
        return null;
    };
    /** *
     * **************************************
      @type {?} */
    var returnID = function (attribID, type) {
        if (attribID == undefined || attribID == "") {
            /** @type {?} */
            var id = type + '_';
            /** @type {?} */
            var r = 'abcdefghijklmnopqrstuvwxyz0123456789';
            for (var i = 0; i < 8; i++) {
                id += r.charAt(Math.floor(Math.random() * r.length));
            }
            return id;
        }
        else {
            return attribID;
        }
    };
    /** *
     * **************************************
      @type {?} */
    var valueSource = function (source, fs, path) {
        if (IsJsonString(source)) {
            /** @type {?} */
            var sourceObj = JSON.parse(source);
            if (sourceObj.hasOwnProperty('actionName')) {
                /** @type {?} */
                var convert = require('xml-js');
                try {
                    /** @type {?} */
                    var xml = fs.readFileSync('../pom.xml');
                }
                catch (e) {
                    console.log('valueSource() reading pom.xml:' + e);
                }
                /** @type {?} */
                var options = {
                    ignoreComment: true,
                    compact: true,
                    ignoreDoctype: true,
                    ignoreCdata: true,
                    ignoreAttributes: true,
                    ignoreInstruction: true,
                    ignoreDeclaration: true,
                };
                /** @type {?} */
                var parsed = convert.xml2js(xml, options);
                /** @type {?} */
                var grpartID = parsed.project.groupId._text + '/' + parsed.project.artifactId._text;
                /** @type {?} */
                var packageInPathFormat = grpartID.replace(/\./g, '/') + '/';
                try {
                    fs.writeFileSync(path.join('actions/src/main/resources/' + packageInPathFormat, sourceObj.actionName + '.js'), sourceObj.action);
                }
                catch (e) {
                    console.log('valueSource() writing action files:' + e);
                }
                /** @type {?} */
                var result = {
                    type: "scriptAction",
                    id: grpartID + "/" + sourceObj.actionName,
                    parameters: sourceObj.parameters
                };
                return result;
            }
            //Check if it's a path to action
            else if (sourceObj.hasOwnProperty('package')) {
                return {
                    type: "scriptAction",
                    id: sourceObj.package,
                    parameters: sourceObj.parameters
                };
            }
            //Checks if it's condition or computed value OR it's Action From Imported Custom Form
            else if (sourceObj.hasOwnProperty('bind') || sourceObj.hasOwnProperty('type')) {
                return sourceObj;
            }
        }
        // If source is some kind of const
        if (source == "true") {
            return true;
        }
        else if (source == "false") {
            return false;
        }
        else if (source.startsWith("[{") || source.startsWith("{") || source.startsWith("['")) {
            try {
                return JSON.parse(source.replace(/\'/g, '\"'));
            }
            catch (e) {
                console.log("valueSource() ---> else if (source.startsWith...: ", e);
            }
        }
        else if (isNaN(parseInt(source))) {
            return source;
        }
        else {
            return parseInt(source);
        }
    };
    /**
     * @param {?} str
     * @return {?}
     */
    function IsJsonString(str) {
        try {
            JSON.parse(str);
        }
        catch (e) {
            return false;
        }
        return true;
    }
    /** *
     * **************************************
      @type {?} */
    var checkAttributes = function (attribs, field, id, canvas, fs, path) {
        if (attribs.visibility) {
            field.state.visible = valueSource(attribs.visibility, fs, path);
        }
        if (attribs.readonly) {
            field.state["read-only"] = valueSource(attribs.readonly, fs, path);
        }
        if (attribs.value) {
            canvas.schema[id].default = valueSource(attribs.value, fs, path);
        }
        if (attribs.valueList) {
            canvas.schema[id].valueList = valueSource(attribs.valueList, fs, path);
        }
        if (attribs.bind) {
            if (attribs.bind.startsWith('{')) {
                try {
                    canvas.schema[id].default = {
                        bind: JSON.parse(attribs.bind.replace(/\'/g, '\"'))
                    };
                }
                catch (e) {
                    console.log("checkAttributes() ---> attribs.bind", e);
                }
            }
            else {
                canvas.schema[id].default = {
                    bind: attribs.bind
                };
            }
        }
        if (attribs.signpost) {
            canvas.schema[id].signpost = attribs.signpost;
        }
        if (attribs.description) {
            canvas.schema[id].description = attribs.description;
        }
        //  Constraints
        if (attribs.required) {
            canvas.schema[id].constraints.required = valueSource(attribs.required, fs, path);
        }
        if (attribs.regex) {
            try {
                /** @type {?} */
                var regexObj = JSON.parse(attribs.regex.replace(/\'/g, '\"'));
            }
            catch (e) {
                console.log("checkAttributes() ---> attribs.regex", e);
            }
            // Object.assign(canvas.schema[id].constraints, regexObj);
            canvas.schema[id].constraints["pattern"] = regexObj;
        }
        if (attribs.min) {
            canvas.schema[id].constraints["min-value"] = valueSource(attribs.min, fs, path);
        }
        if (attribs.max) {
            canvas.schema[id].constraints["max-value"] = valueSource(attribs.max, fs, path);
        }
        if (attribs.match) {
            canvas.schema[id].constraints.match = attribs.match;
        }
        if (!attribs.multiple || attribs.multiple == "false") {
            canvas.schema[id].type.isMultiple = false;
        }
        //External Validation
        if (attribs.options) {
            try {
                /** @type {?} */
                var extVal = JSON.parse(attribs.options.replace(/\'/g, '\"'));
            }
            catch (e) {
                console.log("checkAttributes() ---> attribs.options", e);
            }
            extVal.source = valueSource(JSON.stringify(extVal.source), fs, path);
            canvas.options["externalValidations"] = [];
            canvas.options["externalValidations"].push(extVal);
        }
    };
    /** *
     * **************************************
      @type {?} */
    var generateJSONForm = function (canvas, fs, path, html) {
        canvas = new Canvas();
        /** @type {?} */
        var formName = "";
        /** @type {?} */
        var currentPage = null;
        /** @type {?} */
        var currentSection = null;
        /** @type {?} */
        var currentSelect = null;
        /** @type {?} */
        var options = [];
        /** @type {?} */
        var trID = null;
        /** @type {?} */
        var dgLabels = [];
        /** @type {?} */
        var dgIDs = [];
        /** @type {?} */
        var dgTypes = [];
        /** @type {?} */
        var dgData = [];
        /** @type {?} */
        var currentDatagrid = null;
        /** @type {?} */
        var parser = new htmlparser.Parser({
            onopentag: function (name, attribs) {
                /** @type {?} */
                var field = null;
                /** @type {?} */
                var id = "";
                /** @type {?} */
                var state = new State();
                switch (name) {
                    //The Form
                    case "div":
                        if (attribs.class == "custom-form") {
                            formName = attribs.name;
                        }
                        else {
                            formName = "defautFormName";
                        }
                        break;
                    //  Page/Tab
                    case "form":
                        if (currentPage == null) {
                            currentPage = new Page(attribs.id || "General", [], attribs.title || "General", {});
                        }
                        else {
                            currentPage = new Page(returnID(attribs.id, "page"), [], attribs.title || "New Tab", {});
                        }
                        if (attribs.visibility) {
                            currentPage.state.visible = valueSource(attribs.visibility, fs, path);
                        }
                        canvas.layout.addPage(currentPage);
                        break;
                    //  Section
                    case "section":
                        currentSection = new Section(returnID(attribs.id, "section"), []);
                        canvas.layout.getPage(currentPage.id).addSection(currentSection);
                        break;
                    case "input":
                        switch (attribs.type) {
                            //  Text Field
                            case "text":
                                id = returnID(attribs.id, "textField");
                                field = new Field(id, "textField", state);
                                canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                canvas.schema[id] = new FieldSchema({ dataType: "string" }, {}, attribs.label, attribs.placeholder, undefined);
                                checkAttributes(attribs, field, id, canvas, fs, path);
                                break;
                            // Password Field
                            case "password":
                                id = returnID(attribs.id, "passwordField");
                                field = new Field(id, "passwordField", state);
                                canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                canvas.schema[id] = new FieldSchema({ dataType: "secureString" }, {}, attribs.label, attribs.placeholder, undefined);
                                checkAttributes(attribs, field, id, canvas, fs, path);
                                break;
                            // Decimal or Integer Field
                            case "number":
                                if (attribs.step && attribs.step.startsWith("0.")) {
                                    id = returnID(attribs.id, "decimalField");
                                    field = new Field(id, "decimalField", state);
                                    canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                    canvas.schema[id] = new FieldSchema({ dataType: "decimal" }, {}, attribs.label, attribs.placeholder, undefined);
                                    checkAttributes(attribs, field, id, canvas, fs, path);
                                    canvas.schema[id].step = parseInt(attribs.step);
                                }
                                else {
                                    id = returnID(attribs.id, "integerField");
                                    field = new Field(id, "integerField", state);
                                    canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                    canvas.schema[id] = new FieldSchema({ dataType: "integer" }, {}, attribs.label, attribs.placeholder, undefined);
                                    checkAttributes(attribs, field, id, canvas, fs, path);
                                    canvas.schema[id].step = parseInt(attribs.step) || 1;
                                }
                                break;
                            // CheckBox
                            case "checkbox":
                                id = returnID(attribs.id, "checkbox");
                                field = new Field(id, "checkbox", state);
                                canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                                canvas.schema[id] = new FieldSchema({ dataType: "boolean" }, {}, attribs.label, attribs.placeholder, undefined);
                                checkAttributes(attribs, field, id, canvas, fs, path);
                                break;
                        }
                        break;
                    //  Text Area
                    case "textarea":
                        id = returnID(attribs.id, "textArea");
                        field = new Field(id, "textArea", state);
                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                        canvas.schema[id] = new FieldSchema({ dataType: "string" }, {}, attribs.label, attribs.placeholder, undefined);
                        checkAttributes(attribs, field, id, canvas, fs, path);
                        break;
                    //  Text / Label
                    case "label":
                        id = returnID(attribs.id, "text");
                        field = new Field(id, "text", state);
                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                        canvas.schema[id] = new FieldSchema({ dataType: "string" }, {}, attribs.label, attribs.placeholder, undefined);
                        checkAttributes(attribs, field, id, canvas, fs, path);
                        break;
                    //  Image
                    case "img":
                        id = returnID(attribs.id, "image");
                        field = new Field(id, "image", state);
                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                        canvas.schema[id] = new FieldSchema({ dataType: "string" }, {}, attribs.label, attribs.placeholder, undefined);
                        checkAttributes(attribs, field, id, canvas, fs, path);
                        break;
                    //  DATAGRID
                    case "table":
                        /** @type {?} */
                        var field = null;
                        id = returnID(attribs.id, "datagrid");
                        currentDatagrid = id;
                        field = new Field(id, "datagrid", state);
                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                        canvas.schema[id] = new FieldSchema({ dataType: "complex", "fields": [], isMultiple: true }, {}, attribs.label, attribs.placeholder, options);
                        checkAttributes(attribs, field, id, canvas, fs, path);
                        break;
                    case "tr":
                        trID = attribs.id;
                        if (attribs.value) {
                            canvas.schema[currentDatagrid].default = valueSource(attribs.value, fs, path);
                        }
                        // TODO: TEST
                        break;
                    case "th":
                        dgIDs.push(attribs.id);
                        dgTypes.push(attribs.type);
                        break;
                    case "td":
                        break;
                    //  Multiselect or Dropdown
                    case "select":
                        if (attribs.multiple == "true") {
                            currentSelect = id = returnID(attribs.id, "multiSelect");
                            field = new Field(id, "multiSelect", state);
                            canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                            canvas.schema[id] = new FieldSchema({ dataType: "string", isMultiple: true }, {}, attribs.label, attribs.placeholder, options);
                        }
                        else {
                            currentSelect = id = returnID(attribs.id, "dropDown");
                            field = new Field(id, "dropDown", state);
                            canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                            canvas.schema[id] = new FieldSchema({ dataType: "string" }, {}, attribs.label, attribs.placeholder, options);
                        }
                        checkAttributes(attribs, field, id, canvas, fs, path);
                        break;
                    //  Value Picker
                    case "search":
                        id = returnID(attribs.id, "valuePicker");
                        field = new Field(id, "valuePicker", state);
                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                        canvas.schema[id] = new FieldSchema({ dataType: "reference", referenceType: attribs.referenceType }, {}, attribs.label, attribs.placeholder, options || []);
                        checkAttributes(attribs, field, id, canvas, fs, path);
                        break;
                    //  Date Time Picker
                    case "date":
                        id = returnID(attribs.id, "dateTime");
                        field = new Field(id, "dateTime", state);
                        canvas.layout.getPage(currentPage.id).getSection(currentSection.id).addField(field);
                        canvas.schema[id] = new FieldSchema({ dataType: "dateTime" }, {}, attribs.label, attribs.placeholder, undefined);
                        checkAttributes(attribs, field, id, canvas, fs, path);
                        break;
                }
            },
            ontext: function (text) {
                //      SELECT & MULTISELECT OPTIONS
                if (currentSelect != null) {
                    options.push(valueSource(text, fs, path));
                }
                //      DATAGRID
                if (trID == "cols") {
                    dgLabels.push(valueSource(text, fs, path));
                }
                if (trID == "data") {
                    dgData.push(valueSource(text, fs, path));
                }
            },
            onclosetag: function (tagname) {
                if (tagname === "select" && options.length > 0) {
                    canvas.schema[currentSelect].valueList = options;
                    currentSelect = null;
                    options = [];
                }
                //      DATAGRID
                if (tagname === "table") {
                    canvas.schema[currentDatagrid]["type"]["fields"] = [];
                    canvas.schema[currentDatagrid]["default"] = [];
                    for (var i in dgLabels) {
                        canvas.schema[currentDatagrid]["type"]["fields"].push({
                            "label": dgLabels[i],
                            "id": dgIDs[i],
                            "type": {
                                "dataType": dgTypes[i]
                            }
                        });
                    }
                    /** @type {?} */
                    var cnt = 0;
                    /** @type {?} */
                    var data = {};
                    for (var j in dgData) {
                        data[dgIDs[cnt]] = dgData[j];
                        cnt++;
                        if (cnt > 2) {
                            cnt = 0;
                            canvas.schema[currentDatagrid]["default"].push(data);
                            data = {};
                        }
                    }
                    currentDatagrid = null;
                    dgIDs = [];
                    dgData = [];
                    dgLabels = [];
                    dgTypes = [];
                }
            }
        }, { decodeEntities: true });
        parser.write(html);
        parser.end();
        return {
            name: formName,
            form: canvas
        };
    };
    /** *
     * **************************************
      @type {?} */
    var fs = require('fs');
    /** @type {?} */
    var path = require('path');
    var AppServerModuleNgFactory = require('../../../dist/custom-form-server/main').AppServerModuleNgFactory;
    renderModuleFactory(AppServerModuleNgFactory, {
        document: '<app-root></app-root>',
        url: '/'
    })
        .then(function (html) {
        /** @type {?} */
        var generated = generateJSONForm(canvas, fs, path, html);
        /** @type {?} */
        var canvas = generated.form;
        /** @type {?} */
        var name = generated.name;
        try {
            fs.writeFileSync(path.join('bin/', name + '.json'), JSON.stringify(canvas));
        }
        catch (e) {
            console.log('renderModuleFactory creating the custom form json file: ' + e);
        }
    })
        .catch(function (err) {
        console.log(err.message);
    });
}

//# sourceMappingURL=data:application/json;base64,