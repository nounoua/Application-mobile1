/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var ActionService = /** @class */ (function () {
    function ActionService() {
    }
    /**
     * @param {?} metadata
     * @param {?} originalMethod
     * @return {?}
     */
    ActionService.prototype.externalAction = /**
     * @param {?} metadata
     * @param {?} originalMethod
     * @return {?}
     */
    function (metadata, originalMethod) {
        var _a;
        /** @type {?} */
        var action = "/**\n";
        /** @type {?} */
        var parameters = [];
        /** @type {?} */
        var i = 0;
        for (var key in metadata.parameters) {
            action += "* @param {" + metadata.parameters[key] + "} " + key + "\n";
            parameters.push((_a = {}, _a[key] = metadata.args[i], _a));
            i++;
        }
        action += "* @returns {" + metadata.returnType + "}\n*/\n(" + originalMethod.toString() + ")();";
        return JSON.stringify({
            actionName: metadata.actionName,
            action: action,
            parameters: parameters,
            args: metadata.args
        });
    };
    /**
     * @param {?} metadata
     * @return {?}
     */
    ActionService.prototype.actionFromPackage = /**
     * @param {?} metadata
     * @return {?}
     */
    function (metadata) {
        return JSON.stringify({
            package: metadata.package,
            parameters: metadata.parameters
        });
    };
    ActionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ActionService.ctorParameters = function () { return []; };
    /** @nocollapse */ ActionService.ngInjectableDef = i0.defineInjectable({ factory: function ActionService_Factory() { return new ActionService(); }, token: ActionService, providedIn: "root" });
    return ActionService;
}());
export { ActionService };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jdXN0LWZvcm0tYnVpbGRlci8iLCJzb3VyY2VzIjpbImxpYi9hY3Rpb25TZXJ2aWNlL2FjdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7SUFPekM7S0FBaUI7Ozs7OztJQUVqQixzQ0FBYzs7Ozs7SUFBZCxVQUFlLFFBQWEsRUFBRSxjQUFtQjs7O1FBQy9DLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQzs7UUFDckIsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDOztRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixLQUFLLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUU7WUFDbkMsTUFBTSxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBQ3RFLFVBQVUsQ0FBQyxJQUFJLFdBQUcsR0FBQyxHQUFHLElBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBRyxDQUFDO1lBQzdDLENBQUMsRUFBRSxDQUFDO1NBQ0w7UUFDRCxNQUFNLElBQUksY0FBYyxHQUFHLFFBQVEsQ0FBQyxVQUFVLEdBQUcsVUFBVSxHQUFHLGNBQWMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxNQUFNLENBQUM7UUFFakcsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3BCLFVBQVUsRUFBRSxRQUFRLENBQUMsVUFBVTtZQUMvQixNQUFNLEVBQUUsTUFBTTtZQUNkLFVBQVUsRUFBRSxVQUFVO1lBQ3RCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtTQUNwQixDQUFDLENBQUM7S0FDSjs7Ozs7SUFHRCx5Q0FBaUI7Ozs7SUFBakIsVUFBa0IsUUFBYTtRQUM3QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDcEIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxPQUFPO1lBQ3pCLFVBQVUsRUFBRSxRQUFRLENBQUMsVUFBVTtTQUNoQyxDQUFDLENBQUM7S0FDSjs7Z0JBaENGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7O3dCQUpEOztTQUthLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFjdGlvblNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgZXh0ZXJuYWxBY3Rpb24obWV0YWRhdGE6IGFueSwgb3JpZ2luYWxNZXRob2Q6IGFueSkge1xuICAgIHZhciBhY3Rpb24gPSBcIi8qKlxcblwiO1xuICAgIHZhciBwYXJhbWV0ZXJzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAodmFyIGtleSBpbiBtZXRhZGF0YS5wYXJhbWV0ZXJzKSB7XG4gICAgICBhY3Rpb24gKz0gXCIqIEBwYXJhbSB7XCIgKyBtZXRhZGF0YS5wYXJhbWV0ZXJzW2tleV0gKyBcIn0gXCIgKyBrZXkgKyBcIlxcblwiO1xuICAgICAgcGFyYW1ldGVycy5wdXNoKHsgW2tleV06IG1ldGFkYXRhLmFyZ3NbaV0gfSk7XG4gICAgICBpKys7XG4gICAgfVxuICAgIGFjdGlvbiArPSBcIiogQHJldHVybnMge1wiICsgbWV0YWRhdGEucmV0dXJuVHlwZSArIFwifVxcbiovXFxuKFwiICsgb3JpZ2luYWxNZXRob2QudG9TdHJpbmcoKSArIFwiKSgpO1wiO1xuXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGFjdGlvbk5hbWU6IG1ldGFkYXRhLmFjdGlvbk5hbWUsXG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIHBhcmFtZXRlcnM6IHBhcmFtZXRlcnMsXG4gICAgICBhcmdzOiBtZXRhZGF0YS5hcmdzXG4gICAgfSk7XG4gIH1cblxuXG4gIGFjdGlvbkZyb21QYWNrYWdlKG1ldGFkYXRhOiBhbnkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgcGFja2FnZTogbWV0YWRhdGEucGFja2FnZSxcbiAgICAgIHBhcmFtZXRlcnM6IG1ldGFkYXRhLnBhcmFtZXRlcnNcbiAgICB9KTtcbiAgfVxufVxuIl19