/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var ComputedValueService = /** @class */ (function () {
    function ComputedValueService() {
    }
    /**
     * @param {...?} values
     * @return {?}
     */
    ComputedValueService.prototype.concat = /**
     * @param {...?} values
     * @return {?}
     */
    function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        /** @type {?} */
        var result = {
            bind: {
                values: [],
                operator: "concat"
            }
        };
        for (var i in values) {
            result.bind.values.push(values[i]);
        }
        return JSON.stringify(result);
    };
    /**
     * @param {...?} values
     * @return {?}
     */
    ComputedValueService.prototype.add = /**
     * @param {...?} values
     * @return {?}
     */
    function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        /** @type {?} */
        var obj = {
            bind: {
                values: [],
                operator: "add"
            }
        };
        for (var i in values) {
            obj.bind.values.push(values[i]);
        }
        return JSON.stringify(obj);
    };
    /**
     * @param {...?} values
     * @return {?}
     */
    ComputedValueService.prototype.substract = /**
     * @param {...?} values
     * @return {?}
     */
    function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        /** @type {?} */
        var obj = {
            bind: {
                values: [],
                operator: "substract"
            }
        };
        for (var i in values) {
            obj.bind.values.push(values[i]);
        }
        return JSON.stringify(obj);
    };
    /**
     * @param {...?} values
     * @return {?}
     */
    ComputedValueService.prototype.multiply = /**
     * @param {...?} values
     * @return {?}
     */
    function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        /** @type {?} */
        var obj = {
            bind: {
                values: [],
                operator: "multiply"
            }
        };
        for (var i in values) {
            obj.bind.values.push(values[i]);
        }
        return JSON.stringify(obj);
    };
    ComputedValueService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ComputedValueService.ctorParameters = function () { return []; };
    /** @nocollapse */ ComputedValueService.ngInjectableDef = i0.defineInjectable({ factory: function ComputedValueService_Factory() { return new ComputedValueService(); }, token: ComputedValueService, providedIn: "root" });
    return ComputedValueService;
}());
export { ComputedValueService };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZWQtdmFsdWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2N1c3QtZm9ybS1idWlsZGVyLyIsInNvdXJjZXMiOlsibGliL2NvbXB1dGVkVmFsdWVTZXJ2aWNlL2NvbXB1dGVkLXZhbHVlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztJQU96QztLQUFpQjs7Ozs7SUFFakIscUNBQU07Ozs7SUFBTjtRQUFPLGdCQUFtQjthQUFuQixVQUFtQixFQUFuQixxQkFBbUIsRUFBbkIsSUFBbUI7WUFBbkIsMkJBQW1COzs7UUFDeEIsSUFBSSxNQUFNLEdBQUc7WUFDWCxJQUFJLEVBQUU7Z0JBQ0osTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsUUFBUSxFQUFFLFFBQVE7YUFDbkI7U0FDRixDQUFDO1FBQ0YsS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQy9COzs7OztJQUVELGtDQUFHOzs7O0lBQUg7UUFBSSxnQkFBbUI7YUFBbkIsVUFBbUIsRUFBbkIscUJBQW1CLEVBQW5CLElBQW1CO1lBQW5CLDJCQUFtQjs7O1FBQ3JCLElBQUksR0FBRyxHQUFHO1lBQ1IsSUFBSSxFQUFFO2dCQUNKLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFFBQVEsRUFBRSxLQUFLO2FBQ2hCO1NBQ0YsQ0FBQztRQUNGLEtBQUssSUFBSSxDQUFDLElBQUksTUFBTSxFQUFFO1lBQ3BCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQztRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUM1Qjs7Ozs7SUFFRCx3Q0FBUzs7OztJQUFUO1FBQVUsZ0JBQW1CO2FBQW5CLFVBQW1CLEVBQW5CLHFCQUFtQixFQUFuQixJQUFtQjtZQUFuQiwyQkFBbUI7OztRQUMzQixJQUFJLEdBQUcsR0FBRztZQUNSLElBQUksRUFBRTtnQkFDSixNQUFNLEVBQUUsRUFBRTtnQkFDVixRQUFRLEVBQUUsV0FBVzthQUN0QjtTQUNGLENBQUM7UUFDRixLQUFLLElBQUksQ0FBQyxJQUFJLE1BQU0sRUFBRTtZQUNwQixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakM7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUI7Ozs7O0lBRUQsdUNBQVE7Ozs7SUFBUjtRQUFTLGdCQUFtQjthQUFuQixVQUFtQixFQUFuQixxQkFBbUIsRUFBbkIsSUFBbUI7WUFBbkIsMkJBQW1COzs7UUFDMUIsSUFBSSxHQUFHLEdBQUc7WUFDUixJQUFJLEVBQUU7Z0JBQ0osTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsUUFBUSxFQUFFLFVBQVU7YUFDckI7U0FDRixDQUFDO1FBQ0YsS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDcEIsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzVCOztnQkF6REYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7K0JBSkQ7O1NBS2Esb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb21wdXRlZFZhbHVlU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBjb25jYXQoLi4udmFsdWVzOiBzdHJpbmdbXSkge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBiaW5kOiB7XG4gICAgICAgIHZhbHVlczogW10sXG4gICAgICAgIG9wZXJhdG9yOiBcImNvbmNhdFwiXG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBpIGluIHZhbHVlcykge1xuICAgICAgcmVzdWx0LmJpbmQudmFsdWVzLnB1c2godmFsdWVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlc3VsdCk7XG4gIH1cblxuICBhZGQoLi4udmFsdWVzOiBzdHJpbmdbXSkge1xuICAgIHZhciBvYmogPSB7XG4gICAgICBiaW5kOiB7XG4gICAgICAgIHZhbHVlczogW10sXG4gICAgICAgIG9wZXJhdG9yOiBcImFkZFwiXG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBpIGluIHZhbHVlcykge1xuICAgICAgb2JqLmJpbmQudmFsdWVzLnB1c2godmFsdWVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XG4gIH1cblxuICBzdWJzdHJhY3QoLi4udmFsdWVzOiBzdHJpbmdbXSkge1xuICAgIHZhciBvYmogPSB7XG4gICAgICBiaW5kOiB7XG4gICAgICAgIHZhbHVlczogW10sXG4gICAgICAgIG9wZXJhdG9yOiBcInN1YnN0cmFjdFwiXG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBpIGluIHZhbHVlcykge1xuICAgICAgb2JqLmJpbmQudmFsdWVzLnB1c2godmFsdWVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XG4gIH1cblxuICBtdWx0aXBseSguLi52YWx1ZXM6IHN0cmluZ1tdKSB7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGJpbmQ6IHtcbiAgICAgICAgdmFsdWVzOiBbXSxcbiAgICAgICAgb3BlcmF0b3I6IFwibXVsdGlwbHlcIlxuICAgICAgfVxuICAgIH07XG4gICAgZm9yICh2YXIgaSBpbiB2YWx1ZXMpIHtcbiAgICAgIG9iai5iaW5kLnZhbHVlcy5wdXNoKHZhbHVlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xuICB9XG5cbn1cbiJdfQ==