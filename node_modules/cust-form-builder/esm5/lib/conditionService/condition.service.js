/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var ConditionService = /** @class */ (function () {
    function ConditionService() {
    }
    /**
     * @param {?} cond
     * @return {?}
     */
    ConditionService.prototype.condition = /**
     * @param {?} cond
     * @return {?}
     */
    function (cond) {
        var _a, _b;
        /** @type {?} */
        var origMethod = cond.toString();
        /** @type {?} */
        var lines = origMethod.substring(origMethod.indexOf("{") + 1, origMethod.lastIndexOf("}")).split("\n");
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var conditionVal = null;
        /** @type {?} */
        var val = null;
        for (var i = 0; i < lines.length; i++) {
            if (lines[i].trim().startsWith("if")) {
                conditionVal = lines[i].substring(lines[i].indexOf("\"") + 1, lines[i].lastIndexOf("\""));
                val = lines[i + 1].substring(lines[i + 1].indexOf("\"") + 1, lines[i + 1].lastIndexOf("\""));
                if (conditionVal == "true") {
                    conditionVal = true;
                }
                if (conditionVal == "false") {
                    conditionVal = false;
                }
                if (val == "true") {
                    val = true;
                }
                if (val == "false") {
                    val = false;
                }
                result.push((_a = {},
                    _a[lines[i].substring(lines[i].indexOf(".") + 1, lines[i].lastIndexOf("("))] = (_b = {},
                        _b[lines[i].substring(lines[i].indexOf("(") + 1, lines[i].indexOf("."))] = conditionVal,
                        _b),
                    _a.value = val,
                    _a));
            }
        }
        return JSON.stringify(result);
    };
    ConditionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ConditionService.ctorParameters = function () { return []; };
    /** @nocollapse */ ConditionService.ngInjectableDef = i0.defineInjectable({ factory: function ConditionService_Factory() { return new ConditionService(); }, token: ConditionService, providedIn: "root" });
    return ConditionService;
}());
export { ConditionService };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jdXN0LWZvcm0tYnVpbGRlci8iLCJzb3VyY2VzIjpbImxpYi9jb25kaXRpb25TZXJ2aWNlL2NvbmRpdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7SUFPekM7S0FBaUI7Ozs7O0lBRWpCLG9DQUFTOzs7O0lBQVQsVUFBVSxJQUFTOzs7UUFDakIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDOztRQUNqQyxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7O1FBQ3ZHLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQzs7UUFDaEIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDOztRQUN4QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFFZixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3BDLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDMUYsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUU3RixJQUFJLFlBQVksSUFBSSxNQUFNLEVBQUU7b0JBQzFCLFlBQVksR0FBRyxJQUFJLENBQUM7aUJBQ3JCO2dCQUNELElBQUksWUFBWSxJQUFJLE9BQU8sRUFBRTtvQkFDM0IsWUFBWSxHQUFHLEtBQUssQ0FBQztpQkFDdEI7Z0JBQ0QsSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO29CQUNqQixHQUFHLEdBQUcsSUFBSSxDQUFDO2lCQUNaO2dCQUNELElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRTtvQkFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQztpQkFDYjtnQkFFRCxNQUFNLENBQUMsSUFBSTtvQkFDVCxHQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDdkUsR0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFDbkUsWUFBWTsyQkFDZjtvQkFDRCxRQUFLLEdBQUUsR0FBRzt3QkFDVixDQUFDO2FBQ0o7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUMvQjs7Z0JBMUNGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7OzJCQUpEOztTQUthLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29uZGl0aW9uU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBjb25kaXRpb24oY29uZDogYW55KSB7XG4gICAgdmFyIG9yaWdNZXRob2QgPSBjb25kLnRvU3RyaW5nKCk7XG4gICAgdmFyIGxpbmVzID0gb3JpZ01ldGhvZC5zdWJzdHJpbmcob3JpZ01ldGhvZC5pbmRleE9mKFwie1wiKSArIDEsIG9yaWdNZXRob2QubGFzdEluZGV4T2YoXCJ9XCIpKS5zcGxpdChcIlxcblwiKTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGNvbmRpdGlvblZhbCA9IG51bGw7XG4gICAgdmFyIHZhbCA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGluZXNbaV0udHJpbSgpLnN0YXJ0c1dpdGgoXCJpZlwiKSkge1xuICAgICAgICBjb25kaXRpb25WYWwgPSBsaW5lc1tpXS5zdWJzdHJpbmcobGluZXNbaV0uaW5kZXhPZihcIlxcXCJcIikgKyAxLCBsaW5lc1tpXS5sYXN0SW5kZXhPZihcIlxcXCJcIikpO1xuICAgICAgICB2YWwgPSBsaW5lc1tpICsgMV0uc3Vic3RyaW5nKGxpbmVzW2kgKyAxXS5pbmRleE9mKFwiXFxcIlwiKSArIDEsIGxpbmVzW2kgKyAxXS5sYXN0SW5kZXhPZihcIlxcXCJcIikpO1xuXG4gICAgICAgIGlmIChjb25kaXRpb25WYWwgPT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICBjb25kaXRpb25WYWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25kaXRpb25WYWwgPT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgY29uZGl0aW9uVmFsID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbCA9PSBcInRydWVcIikge1xuICAgICAgICAgIHZhbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbCA9PSBcImZhbHNlXCIpIHtcbiAgICAgICAgICB2YWwgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICBbbGluZXNbaV0uc3Vic3RyaW5nKGxpbmVzW2ldLmluZGV4T2YoXCIuXCIpICsgMSwgbGluZXNbaV0ubGFzdEluZGV4T2YoXCIoXCIpKV06IHtcbiAgICAgICAgICAgIFtsaW5lc1tpXS5zdWJzdHJpbmcobGluZXNbaV0uaW5kZXhPZihcIihcIikgKyAxLCBsaW5lc1tpXS5pbmRleE9mKFwiLlwiKSldOlxuICAgICAgICAgICAgICBjb25kaXRpb25WYWxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZhbHVlOiB2YWxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xuICB9XG5cbn1cbiJdfQ==